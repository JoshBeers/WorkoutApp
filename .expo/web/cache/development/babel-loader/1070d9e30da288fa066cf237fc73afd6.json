{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BottomTabBarItem;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TabBarIcon = _interopRequireDefault(require(\"./TabBarIcon\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\arack\\\\OneDrive\\\\Desktop\\\\WorkoutApp\\\\node_modules\\\\@react-navigation\\\\bottom-tabs\\\\src\\\\views\\\\BottomTabItem.tsx\";\n\nfunction BottomTabBarItem(_ref) {\n  var _this = this;\n\n  var focused = _ref.focused,\n      route = _ref.route,\n      label = _ref.label,\n      icon = _ref.icon,\n      badge = _ref.badge,\n      badgeStyle = _ref.badgeStyle,\n      to = _ref.to,\n      _ref$button = _ref.button,\n      button = _ref$button === void 0 ? function (_ref2) {\n    var children = _ref2.children,\n        style = _ref2.style,\n        _onPress = _ref2.onPress,\n        to = _ref2.to,\n        accessibilityRole = _ref2.accessibilityRole,\n        rest = (0, _objectWithoutProperties2.default)(_ref2, [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\"]);\n\n    if (_reactNative.Platform.OS === 'web' && to) {\n      return _react.default.createElement(_native.Link, (0, _extends2.default)({}, rest, {\n        to: to,\n        style: [styles.button, style],\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress == null ? void 0 : _onPress(e);\n            }\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }), children);\n    } else {\n      return _react.default.createElement(_reactNative.TouchableWithoutFeedback, (0, _extends2.default)({}, rest, {\n        accessibilityRole: accessibilityRole,\n        onPress: _onPress,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: style,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }, children));\n    }\n  } : _ref$button,\n      accessibilityLabel = _ref.accessibilityLabel,\n      testID = _ref.testID,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      horizontal = _ref.horizontal,\n      customActiveTintColor = _ref.activeTintColor,\n      customInactiveTintColor = _ref.inactiveTintColor,\n      _ref$activeBackground = _ref.activeBackgroundColor,\n      activeBackgroundColor = _ref$activeBackground === void 0 ? 'transparent' : _ref$activeBackground,\n      _ref$inactiveBackgrou = _ref.inactiveBackgroundColor,\n      inactiveBackgroundColor = _ref$inactiveBackgrou === void 0 ? 'transparent' : _ref$inactiveBackgrou,\n      _ref$showLabel = _ref.showLabel,\n      showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n      allowFontScaling = _ref.allowFontScaling,\n      labelStyle = _ref.labelStyle,\n      iconStyle = _ref.iconStyle,\n      style = _ref.style;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? (0, _color.default)(colors.text).mix((0, _color.default)(colors.card), 0.5).hex() : customInactiveTintColor;\n\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    var color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return _react.default.createElement(_reactNative.Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 9\n        }\n      }, label);\n    }\n\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return _react.default.createElement(_TabBarIcon.default, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: _react.default.createElement(_react.default.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }\n    }, renderIcon(scene), renderLabel(scene))\n  });\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["C:/Users/arack/OneDrive/Desktop/WorkoutApp/node_modules/@react-navigation/bottom-tabs/src/views/BottomTabItem.tsx"],"names":["BottomTabBarItem","focused","route","label","icon","badge","badgeStyle","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","accessibilityLabel","testID","onLongPress","horizontal","customActiveTintColor","activeTintColor","customInactiveTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","labelBeside","labelBeneath","position","renderIcon","activeOpacity","inactiveOpacity","scene","backgroundColor","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}