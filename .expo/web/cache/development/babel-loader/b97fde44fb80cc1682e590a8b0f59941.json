{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addExerciseToRoutine = addExerciseToRoutine;\nexports.addMultipleExercisesToRoutine = addMultipleExercisesToRoutine;\nexports.deleteExercisesUnderARoutine = deleteExercisesUnderARoutine;\nexports.deleteExerciseFromRoutine = deleteExerciseFromRoutine;\nexports.getExerciseFromRoutine = getExerciseFromRoutine;\nexports.getAllExercisesWithinRoutines = getAllExercisesWithinRoutines;\nexports.createNewExerciseFromExercise = createNewExerciseFromExercise;\nexports.getAllExercises = getAllExercises;\nexports.deleteExerciseById = deleteExerciseById;\nexports.getAllCompleteExerciseBySpecificExerciseID = getAllCompleteExerciseBySpecificExerciseID;\nexports.getCompletedExercisesForWorkout = getCompletedExercisesForWorkout;\nexports.saveExerciseFromCompletedExercises = saveExerciseFromCompletedExercises;\nexports.addMultipleCompleteExercisesToCompleteWorkout = addMultipleCompleteExercisesToCompleteWorkout;\nexports.getAverageMetricsForExercise = getAverageMetricsForExercise;\nexports.ExerciseStats = exports.CompleteExercise = exports.Exercise = exports.ExerciseWithinRoutine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar _Workout = require(\"./Workout\");\n\nvar ExerciseWithinRoutine = function ExerciseWithinRoutine(ID, exerciseID, routineId, placeInOrder) {\n  (0, _classCallCheck2.default)(this, ExerciseWithinRoutine);\n  this.ID = ID;\n  this.exerciseID = exerciseID;\n  this.routineId = routineId;\n  this.placeInOrder = placeInOrder;\n};\n\nexports.ExerciseWithinRoutine = ExerciseWithinRoutine;\n\nfunction addExerciseToRoutine(routineID, exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\", [exercise.exerciseID, routineID, exercise.placeInOrder], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction addMultipleExercisesToRoutine(routineID, exercises, callback) {\n  for (var i = 0; i < exercises.length; i++) {\n    if (i == exercises.length - 1) {\n      addExerciseToRoutine(routineID, exercises[i], function () {\n        callback();\n      });\n    } else {\n      addExerciseToRoutine(routineID, exercises[i]);\n    }\n  }\n}\n\nfunction deleteExercisesUnderARoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where routineID = ? ;\", [routineID], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction deleteExerciseFromRoutine(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\", [exercise.ID], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getExerciseFromRoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\" + routineID + \";\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getAllExercisesWithinRoutines(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nvar Exercise = function Exercise(exerciseID, name, description, doesUseWeight, isCardio) {\n  (0, _classCallCheck2.default)(this, Exercise);\n  this.exerciseID = exerciseID;\n  this.name = name;\n  this.description = description;\n  this.doesUseWeight = doesUseWeight;\n  this.isCardio = isCardio;\n};\n\nexports.Exercise = Exercise;\n\nfunction createNewExerciseFromExercise(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(name,description,doesUseWeight,isCardio) values('\" + exercise.name + \"','\" + exercise.description + \"',\" + exercise.doesUseWeight + \",\" + exercise.isCardio + \");\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getAllExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight, rows.rows.item(i).isCardio));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction deleteExerciseById(id, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"delete from Exercises where ID = \" + id + \";\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nvar CompleteExercise = function CompleteExercise(ID, exerciseId, workoutID, numberOfReps, numberOfSets, averageWeight, date) {\n  (0, _classCallCheck2.default)(this, CompleteExercise);\n  this.ID = ID;\n  this.exerciseId = exerciseId;\n  this.workoutID = workoutID;\n  this.numberOfReps = numberOfReps;\n  this.numberOfSets = numberOfSets;\n  this.averageWeight = averageWeight;\n  this.date = date;\n};\n\nexports.CompleteExercise = CompleteExercise;\n\nfunction getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback) {\n  (0, _Workout.getMapOfCompleteWorkoutIDsToDates)(function (result) {\n    var map = result;\n    getCompleteExercisesForSpecificExerciseID(exerciseID, function (result) {\n      var tempExercises = result;\n\n      for (var i = 0; i < result.length; i++) {\n        tempExercises[i].date = map.get(result[i].workoutID);\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getCompletedExercisesForWorkout(workoutID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises where workOutID = ?;\", [workoutID], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction saveExerciseFromCompletedExercises(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,averageWeight,workOutID) values('\" + exercise.exerciseId + \"',\" + exercise.numberOfReps + \",\" + exercise.numberOfSets + \",\" + exercise.averageWeight + \",\" + exercise.workoutID + \");\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction addMultipleCompleteExercisesToCompleteWorkout(completeWorkout, callback) {\n  for (var i = 0; i < completeWorkout.completedExercises.length; i++) {\n    completeWorkout.completedExercises[i].workoutID = completeWorkout.ID;\n\n    if (i == completeWorkout.completedExercises.length - 1) {\n      saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i], function () {\n        callback();\n      });\n    } else {\n      saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i]);\n    }\n  }\n}\n\nvar ExerciseStats = function ExerciseStats(exerciseId, averageNumberOfReps, averageNumberOfSets, averageWeight) {\n  (0, _classCallCheck2.default)(this, ExerciseStats);\n  this.exerciseId = exerciseId;\n  this.averageNumberOfReps = averageNumberOfReps;\n  this.averageNumberOfSets = averageNumberOfSets;\n  this.averageWeight = averageWeight;\n};\n\nexports.ExerciseStats = ExerciseStats;\n\nfunction getAverageMetricsForExercise(exerciseID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select AVG(numberOfReps) as averageNumberOfReps, avg(numberOfSets) as averageNumberOfSets, avg(averageWeight) as averageWeight from CompletedExercises where exerciseId = ?;\", [exerciseID], function (_, rows) {\n      if (callback) {\n        callback(new ExerciseStats(exerciseID, rows.rows.item(0).averageNumberOfReps, rows.rows.item(0).averageNumberOfSets, rows.rows.item(0).averageWeight));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/Anne/WebstormProjects/WorkoutApp/Classes/Exercise.js"],"names":["ExerciseWithinRoutine","ID","exerciseID","routineId","placeInOrder","addExerciseToRoutine","routineID","exercise","callback","db","transaction","tx","executeSql","_","rows","addMultipleExercisesToRoutine","exercises","i","length","deleteExercisesUnderARoutine","deleteExerciseFromRoutine","getExerciseFromRoutine","tempExercises","push","item","getAllExercisesWithinRoutines","sort","a","b","Exercise","name","description","doesUseWeight","isCardio","createNewExerciseFromExercise","getAllExercises","deleteExerciseById","id","CompleteExercise","exerciseId","workoutID","numberOfReps","numberOfSets","averageWeight","date","getAllCompleteExerciseBySpecificExerciseID","result","map","getCompleteExercisesForSpecificExerciseID","get","workOutID","getCompletedExercisesForWorkout","saveExerciseFromCompletedExercises","addMultipleCompleteExercisesToCompleteWorkout","completeWorkout","completedExercises","ExerciseStats","averageNumberOfReps","averageNumberOfSets","getAverageMetricsForExercise"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as SQLite from \"expo-sqlite\";\nimport {db} from \"../App\";\nimport {CompletedWorkout, getMapOfCompleteWorkoutIDsToDates} from \"./Workout\";\n\n\n/*\nstuff for exerciuses that are wiuthin a routine\n\n */\nexport class ExerciseWithinRoutine{\n    constructor(ID,exerciseID, routineId, placeInOrder) {\n        this.ID = ID\n        this.exerciseID = exerciseID\n        this.routineId = routineId\n        this.placeInOrder = placeInOrder\n    }\n}\n\n//tested\nexport function addExerciseToRoutine(routineID,exercise, callback){\n    //console.log(\"sqllog_method_addExerciseToRoutine\")\n        db.transaction(tx => {\n            //insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\n            tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\",[exercise.exerciseID,routineID,exercise.placeInOrder],(_,rows) =>{\n               // console.log(\"sqllog_method_addExerciseToRoutine\")\n                if (callback != null) {\n                    callback()\n                }\n            })\n\n\n        })\n}\n\nexport function addMultipleExercisesToRoutine(routineID,exercises, callback){\n    for(let i = 0; i<exercises.length ; i++){\n        if(i == exercises.length-1){\n            addExerciseToRoutine(routineID, exercises[i], function (){\n                callback()\n            })\n        }else{\n            addExerciseToRoutine(routineID, exercises[i])\n        }\n        //console.log(\"sqllog_method_addExercisesToRoutine\",i)\n    }\n}\n\nexport function deleteExercisesUnderARoutine(routineID,callback){\n    db.transaction(tx => {\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where routineID = ? ;\",[routineID], (_,rows) =>{\n            if (callback != null) {\n                callback()\n            }\n        })\n    })\n}\n\n\n\n\n//tested\n/*\n\n */\nexport function deleteExerciseFromRoutine(exercise:ExerciseWithinRoutine, callback){\n    db.transaction(tx => {\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\",[exercise.ID], (_,rows) =>{\n            if (callback != null) {\n                callback()\n            }\n        })\n    })\n}\n\n\n//tested\nexport function getExerciseFromRoutine(routineID, callback){\n\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\"+ routineID +\";\",[],(_,rows) => {\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\n            let tempExercises = []\n\n\n            for(let i = 0;i<rows.rows.length;i++){\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\n            }\n           // tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n    })\n}\n\nexport function getAllExercisesWithinRoutines(callback){\n\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from ExercisesWithinRoutines;\",[],(_,rows) => {\n             //console.log(\"sqllog_method_getAllExercisesWithinRoutines_rows\",rows.rows)\n            let tempExercises = []\n\n\n            for(let i = 0;i<rows.rows.length;i++){\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\n            }\n            tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n    })\n}\n\n\n\n/*\nstuff for exercises that are bases to be added to routines\n\n */\n\nexport class Exercise{\n    constructor(exerciseID:number , name: string, description:string, doesUseWeight:boolean, isCardio:boolean) {\n        this.exerciseID = exerciseID\n        this.name = name\n        this.description = description\n        this.doesUseWeight = doesUseWeight\n        this.isCardio = isCardio\n    }\n}\n\n//tested\nexport function createNewExerciseFromExercise(exercise: Exercise, callback){\n    //'Create table if not exists Exercises(ID integer primary key DESC, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\n    db.transaction(tx => {\n        tx.executeSql(\"insert into Exercises(name,description,doesUseWeight,isCardio) values('\" +\n            exercise.name + \"','\" +\n            exercise.description + \"',\" +\n            exercise.doesUseWeight +\",\" +\n            exercise.isCardio +\n            \");\",[],(_,rows) =>{\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\n            if (callback != null) {\n                callback()\n            }\n        })\n    })\n}\n\n//tested\nexport function getAllExercises(callback) {\n    db.transaction(tx => {\n        tx.executeSql(\"select * from Exercises;\", [], (_, rows) => {\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\n            let tempExercises = []\n\n\n            for (let i = 0; i < rows.rows.length; i++) {\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\n                tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight,rows.rows.item(i).isCardio))\n            }\n            tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n\n    })\n}\n\n//tested\nexport function deleteExerciseById(id, callback){\n    db.transaction(tx => {\n        tx.executeSql(\"delete from Exercises where ID = \"+id+\";\", [], (_,rows) =>{\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\n            if (callback != null) {\n                callback()\n            }\n        })\n    })\n}\n\n\n\n/*\ncompleted exercise stuff\n\nCompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,averageWeight integer, workOutID int not null,\n*/\nexport class CompleteExercise{\n    constructor(ID: number, exerciseId: number,workoutID:number, numberOfReps:number , numberOfSets:number, averageWeight, date) {\n        this.ID =ID\n        this.exerciseId = exerciseId\n        this.workoutID = workoutID\n        this.numberOfReps = numberOfReps\n        this.numberOfSets = numberOfSets\n        this.averageWeight = averageWeight\n        this.date = date\n    }\n}\n\nexport function getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback){\n    getMapOfCompleteWorkoutIDsToDates(function (result){\n        let map = result\n\n        getCompleteExercisesForSpecificExerciseID(exerciseID, function (result){\n            let tempExercises = result\n\n            for(let i = 0 ; i< result.length; i++){\n                tempExercises[i].date = map.get(result[i].workoutID)\n            }\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n    })\n}\n\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID,callback){\n    db.transaction(tx => {\n        tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], (_, rows) => {\n            //console.log(\"sqllog_method_getCompleteExercisesForSpecificExerciseID_rows\",rows.rows)\n            let tempExercises = []\n\n            for (let i = 0; i < rows.rows.length; i++) {\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\n                tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null))\n            }\n\n\n            //tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n    })\n}\n\nexport function getCompletedExercisesForWorkout(workoutID,callback){\n    db.transaction(tx => {\n        tx.executeSql(\"select * from CompletedExercises where workOutID = ?;\", [workoutID], (_, rows) => {\n            //console.log(\"sqllog_method_getCompleteExercisesForSpecificExerciseID_rows\",rows.rows)\n            let tempExercises = []\n\n            for (let i = 0; i < rows.rows.length; i++) {\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\n                tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null))\n            }\n            //tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\n            if(callback != null){\n                callback(tempExercises)\n            }\n        })\n    })\n}\n\nexport function saveExerciseFromCompletedExercises(exercise:CompleteExercise, callback) {\n    db.transaction(tx =>{\n        tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,averageWeight,workOutID) values('\" +\n        exercise.exerciseId + \"',\" +\n        exercise.numberOfReps + \",\" +\n        exercise.numberOfSets + \",\" +\n        exercise.averageWeight + \",\" +\n        exercise.workoutID +\n        \");\",[],(_,rows) =>{\n            if (callback != null) {\n                callback()\n            }\n        })\n    })\n}\n\nexport function addMultipleCompleteExercisesToCompleteWorkout(completeWorkout:CompletedWorkout, callback){\n    for(let i = 0; i<completeWorkout.completedExercises.length ; i++){\n        completeWorkout.completedExercises[i].workoutID = completeWorkout.ID\n        if(i == completeWorkout.completedExercises.length-1){\n            saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i], function (){\n                callback()\n            })\n        }else{\n            saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i])\n        }\n        //console.log(\"sqllog_method_addExercisesToRoutine\",i)\n    }\n}\n\nexport class ExerciseStats{\n    constructor(exerciseId, averageNumberOfReps, averageNumberOfSets, averageWeight) {\n        this.exerciseId = exerciseId\n        this.averageNumberOfReps = averageNumberOfReps\n        this.averageNumberOfSets = averageNumberOfSets\n        this.averageWeight = averageWeight\n    }\n}\n//\nexport function getAverageMetricsForExercise(exerciseID,callback){\n    //console.log(\"sqllog_method_getAverageMetricsForExercise\",exerciseID)\n    db.transaction(tx => {\n        tx.executeSql(\"select AVG(numberOfReps) as averageNumberOfReps, avg(numberOfSets) as averageNumberOfSets, avg(averageWeight) as averageWeight from CompletedExercises where exerciseId = ?;\", [exerciseID], (_, rows) => {\n            //console.log(\"sqllog_method_getAverageMetricsForExercise\",rows.rows)\n            if(callback){\n               callback(new ExerciseStats(exerciseID, rows.rows.item(0).averageNumberOfReps, rows.rows.item(0).averageNumberOfSets, rows.rows.item(0).averageWeight))\n           }\n        })\n    })\n\n\n}\n"]},"metadata":{},"sourceType":"script"}