{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = HeaderConfig;\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nfunction HeaderConfig(_ref) {\n  var route = _ref.route,\n      title = _ref.title,\n      headerRight = _ref.headerRight,\n      headerLeft = _ref.headerLeft,\n      headerCenter = _ref.headerCenter,\n      headerTitle = _ref.headerTitle,\n      headerBackTitle = _ref.headerBackTitle,\n      _ref$headerBackTitleV = _ref.headerBackTitleVisible,\n      headerBackTitleVisible = _ref$headerBackTitleV === void 0 ? true : _ref$headerBackTitleV,\n      backButtonImage = _ref.backButtonImage,\n      headerHideBackButton = _ref.headerHideBackButton,\n      headerHideShadow = _ref.headerHideShadow,\n      headerLargeTitleHideShadow = _ref.headerLargeTitleHideShadow,\n      headerTintColor = _ref.headerTintColor,\n      _ref$headerTopInsetEn = _ref.headerTopInsetEnabled,\n      headerTopInsetEnabled = _ref$headerTopInsetEn === void 0 ? true : _ref$headerTopInsetEn,\n      headerLargeTitle = _ref.headerLargeTitle,\n      headerTranslucent = _ref.headerTranslucent,\n      _ref$headerStyle = _ref.headerStyle,\n      headerStyle = _ref$headerStyle === void 0 ? {} : _ref$headerStyle,\n      _ref$headerLargeStyle = _ref.headerLargeStyle,\n      headerLargeStyle = _ref$headerLargeStyle === void 0 ? {} : _ref$headerLargeStyle,\n      _ref$headerTitleStyle = _ref.headerTitleStyle,\n      headerTitleStyle = _ref$headerTitleStyle === void 0 ? {} : _ref$headerTitleStyle,\n      _ref$headerLargeTitle = _ref.headerLargeTitleStyle,\n      headerLargeTitleStyle = _ref$headerLargeTitle === void 0 ? {} : _ref$headerLargeTitle,\n      _ref$headerBackTitleS = _ref.headerBackTitleStyle,\n      headerBackTitleStyle = _ref$headerBackTitleS === void 0 ? {} : _ref$headerBackTitleS,\n      headerShown = _ref.headerShown,\n      backButtonInCustomView = _ref.backButtonInCustomView;\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var tintColor = headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary;\n  return React.createElement(_reactNativeScreens.ScreenStackHeaderConfig, {\n    backButtonInCustomView: backButtonInCustomView,\n    backgroundColor: headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card,\n    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',\n    backTitleFontFamily: headerBackTitleStyle.fontFamily,\n    backTitleFontSize: headerBackTitleStyle.fontSize,\n    blurEffect: headerStyle.blurEffect,\n    color: tintColor,\n    hidden: headerShown === false,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow,\n    largeTitle: headerLargeTitle,\n    largeTitleBackgroundColor: headerLargeStyle.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle.color,\n    largeTitleFontFamily: headerLargeTitleStyle.fontFamily,\n    largeTitleFontSize: headerLargeTitleStyle.fontSize,\n    largeTitleHideShadow: headerLargeTitleHideShadow,\n    title: headerTitle !== undefined ? headerTitle : title !== undefined ? title : route.name,\n    titleColor: headerTitleStyle.color !== undefined ? headerTitleStyle.color : headerTintColor !== undefined ? headerTintColor : colors.text,\n    titleFontFamily: headerTitleStyle.fontFamily,\n    titleFontSize: headerTitleStyle.fontSize,\n    topInsetEnabled: headerTopInsetEnabled,\n    translucent: headerTranslucent === true\n  }, headerRight !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderRightView, null, headerRight({\n    tintColor: tintColor\n  })) : null, backButtonImage !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderBackButtonImage, {\n    key: \"backImage\",\n    source: backButtonImage\n  }) : null, headerLeft !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderLeftView, null, headerLeft({\n    tintColor: tintColor\n  })) : null, headerCenter !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderCenterView, null, headerCenter({\n    tintColor: tintColor\n  })) : null);\n}","map":{"version":3,"sources":["HeaderConfig.tsx"],"names":["headerBackTitleVisible","headerTopInsetEnabled","headerStyle","headerLargeStyle","headerTitleStyle","headerLargeTitleStyle","headerBackTitleStyle","backButtonInCustomView","colors","tintColor","headerTintColor","headerShown","headerTitle","title","route","headerTranslucent","headerRight","backButtonImage","headerLeft","headerCenter"],"mappings":"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","sourcesContent":["import { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport { NativeStackNavigationOptions } from '../types';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig({\n  route,\n  title,\n  headerRight,\n  headerLeft,\n  headerCenter,\n  headerTitle,\n  headerBackTitle,\n  headerBackTitleVisible = true,\n  backButtonImage,\n  headerHideBackButton,\n  headerHideShadow,\n  headerLargeTitleHideShadow,\n  headerTintColor,\n  headerTopInsetEnabled = true,\n  headerLargeTitle,\n  headerTranslucent,\n  headerStyle = {},\n  headerLargeStyle = {},\n  headerTitleStyle = {},\n  headerLargeTitleStyle = {},\n  headerBackTitleStyle = {},\n  headerShown,\n  backButtonInCustomView,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor = headerTintColor ?? colors.primary;\n\n  return (\n    <ScreenStackHeaderConfig\n      backButtonInCustomView={backButtonInCustomView}\n      backgroundColor={\n        headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card\n      }\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={headerBackTitleStyle.fontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      blurEffect={headerStyle.blurEffect}\n      color={tintColor}\n      hidden={headerShown === false}\n      hideBackButton={headerHideBackButton}\n      hideShadow={headerHideShadow}\n      largeTitle={headerLargeTitle}\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}\n      largeTitleColor={headerLargeTitleStyle.color}\n      largeTitleFontFamily={headerLargeTitleStyle.fontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      titleFontFamily={headerTitleStyle.fontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      topInsetEnabled={headerTopInsetEnabled}\n      translucent={headerTranslucent === true}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}