{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTables = createTables;\nexports.createDummyData = createDummyData;\nexports.createWorkoutDummyData = createWorkoutDummyData;\nexports.creatCompletedExercisesDData = creatCompletedExercisesDData;\nexports.createExercisesDD = createExercisesDD;\nexports.createRoutinesDD = createRoutinesDD;\nexports.createExercisesWithinRoutineDD = createExercisesWithinRoutineDD;\nexports.clearDB = clearDB;\nexports.logDataBase = logDataBase;\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"./App\");\n\nfunction createTables(callback) {\n  _App.db.transaction(function (tx) {\n    try {\n      tx.executeSql('CREATE table if not exists CompletedWorkouts(ID INTEGER PRIMARY KEY AUTOINCREMENT, date date not null);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('Create table if not exists Exercises(ID integer primary key AUTOINCREMENT, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists CompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,averageWeight integer, workOutID int not null,FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(workOutID) REFERENCES Workouts(ID));');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists routines(ID integer primary key AUTOINCREMENT, name varchar(30) not null,placeOnList integer);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists ExercisesWithinRoutines(ID integer primary key AUTOINCREMENT,exerciseID int not null, routineID int not null, placeInOrder int not null, FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(routineID) REFERENCES WorkoutRoutines(ID));');\n    } catch (error) {}\n\n    callback();\n  });\n}\n\nfunction createDummyData(callback) {\n  console.log(\"sqllog\", \"createDD\");\n  clearDB(function () {\n    createWorkoutDummyData(function () {\n      createExercisesDD(function () {\n        creatCompletedExercisesDData(function () {\n          createRoutinesDD(function () {\n            createExercisesWithinRoutineDD(function () {\n              if (callback != null) {\n                callback();\n              }\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction createWorkoutDummyData(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedWorkouts(id,date) values(1,'2020-10-20');\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedWorkouts(id,date) values(2,'2020-10-15');\");\n  });\n\n  callback();\n}\n\nfunction creatCompletedExercisesDData(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(1,1,5,3,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID,averageWeight) values(2,2,6,2,1, 5);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(3,3,5,6,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(4,1,2,1,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(5,1,1,3,2);\");\n  });\n\n  callback();\n}\n\nfunction createExercisesDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(1,'push up','it is a push up',false);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(2,'dead lift','is a deadlift',true);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,doesUseWeight) values(3,'curl up',false);\");\n  });\n\n  callback();\n}\n\nfunction createRoutinesDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into routines(ID,name,placeOnList) values(1,'main routine',1);\");\n  });\n\n  callback();\n}\n\nfunction createExercisesWithinRoutineDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(1,1,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(3,1,3);\");\n  });\n\n  callback();\n}\n\nfunction clearDB(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from CompletedWorkouts');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from Exercises');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from CompletedExercises');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from routines');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from ExercisesWithinRoutines');\n  });\n\n  callback();\n}\n\nfunction logDataBase(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedWorkouts;\", [], function (_, rows) {\n      console.log(\"sqllog_Workouts\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises;\", [], function (_, rows) {\n      console.log(\"sqllog_CompletedExercises\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      console.log(\"sqllog_Exercises\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines;\", [], function (_, rows) {\n      console.log(\"sqllog_routines\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines;\", [], function (_, rows) {\n      console.log(\"sqllog_ExercisesWithinRoutines\", rows.rows);\n    });\n  });\n\n  callback();\n}","map":{"version":3,"sources":["/Users/Anne/WebstormProjects/WorkoutApp/StartUpSQL.js"],"names":["createTables","callback","db","transaction","tx","executeSql","error","createDummyData","console","log","clearDB","createWorkoutDummyData","createExercisesDD","creatCompletedExercisesDData","createRoutinesDD","createExercisesWithinRoutineDD","logDataBase","_","rows"],"mappings":"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","sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport {db} from \"./App\";\n\n//const db = SQLite.openDatabase(\"workoutAppDB.db\");\nexport function createTables(callback) {\n    db.transaction((tx) => {\n        try {\n            tx.executeSql(\n                'CREATE table if not exists CompletedWorkouts(ID INTEGER PRIMARY KEY AUTOINCREMENT, date date not null);',\n            );\n        } catch (error) {}\n\n        try {\n            tx.executeSql(\n                'Create table if not exists Exercises(ID integer primary key AUTOINCREMENT, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\n            );\n        } catch (error) {}\n\n        try {\n            tx.executeSql(\n                'create table if not exists CompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,averageWeight integer, workOutID int not null,FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(workOutID) REFERENCES Workouts(ID));',\n            );\n        } catch (error) {}\n\n        try {\n            tx.executeSql(\n                'create table if not exists routines(ID integer primary key AUTOINCREMENT, name varchar(30) not null,placeOnList integer);',\n            );\n        } catch (error) {}\n\n        try {\n            tx.executeSql(\n                'create table if not exists ExercisesWithinRoutines(ID integer primary key AUTOINCREMENT,exerciseID int not null, routineID int not null, placeInOrder int not null, FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(routineID) REFERENCES WorkoutRoutines(ID));',\n            );\n        } catch (error) {}\n        callback()\n    });\n}\n\n// stuff for dummyData\nexport function createDummyData(callback) {\n    console.log(\"sqllog\", \"createDD\")\n    clearDB(function (){\n        createWorkoutDummyData(function (){\n            createExercisesDD(function (){\n                creatCompletedExercisesDData(function (){\n                    createRoutinesDD(function (){\n                        createExercisesWithinRoutineDD(function (){\n\n                            //logDataBase(function (){\n                            if(callback != null){\n                                callback()\n                            }\n                            //})\n                        })\n                    })\n                })\n            })\n        })\n    })\n\n\n\n}\n\n/*\n1. id=1 date = 10/20/2020\n2. id = 2 date = 10/15/2020\n */\nexport function createWorkoutDummyData(callback){\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedWorkouts(id,date) values(1,'2020-10-20');\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedWorkouts(id,date) values(2,'2020-10-15');\");\n    });\n    //console.log(\"sqllog\", \"workouts created\")\n    callback()\n}\n\n/*\n5 completed exercises\n1. id = 1, exerciseId= 1, numberOfReps =5, numberOfSets = 3,weight = null, workOutID =1\n2. id = 2, exerciseId= 2, numberOfReps =6, numberOfSets = 2,weight = 5, workOutID =1\n3. id = 3, exerciseId= 3, numberOfReps =5, numberOfSets = 6,weight = null,  workOutID =1\n4. id = 4, exerciseId= 1, numberOfReps =2, numberOfSets = 1,weight = null, workOutID =1\n5. id = 5, exerciseId= 1, numberOfReps =1, numberOfSets = 3,weight = null, workOutID =2\n */\nexport function creatCompletedExercisesDData(callback){\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(1,1,5,3,1);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID,averageWeight) values(2,2,6,2,1, 5);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(3,3,5,6,1);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(4,1,2,1,1);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(5,1,1,3,2);\");\n    });\n    //console.log(\"sqllog\", \"completed exercises created\")\n    callback()\n}\n\n\n/*\nthree exercises\n1. id = 1, name = 'push up', description = 'it is a push up', doesUseWeight = false\n2. id = 2, name = 'dead lift', description = 'is a deadlift', doesUseWeight = true\n2. id = 3, name = 'curl up', description = null, doesUseWeight = false\n\n */\nexport function createExercisesDD(callback){\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(1,'push up','it is a push up',false);\",);\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(2,'dead lift','is a deadlift',true);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into Exercises(ID,name,doesUseWeight) values(3,'curl up',false);\");\n    });\n    //console.log(\"sqllog\", \"exercises created\")\n    callback()\n}\n\n\n\n/*\none routine\nid = 1, name = 'main routine', placeOnList = 1\n */\nexport function createRoutinesDD(callback){\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into routines(ID,name,placeOnList) values(1,'main routine',1);\");\n    });\n    //console.log(\"sqllog\", \"routine created\")\n    callback()\n}\n\n/*\n3\n1. id= 1,exerciseID = 1, routineID =1  placeInOrder =1\n2. id = 2, exerciseID = 2, routineID =1  placeInOrder =2\n3. id = 3,exerciseID = 3, routineID =1   placeInOrder =3\n */\nexport function createExercisesWithinRoutineDD(callback){\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(1,1,1);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\");\n    });\n    db.transaction((tx) => {\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(3,1,3);\");\n    });\n\n    //console.log(\"sqllog\", \"ExercisesWithinRoutine created\")\n    callback()\n}\n\n\nexport function clearDB(callback) {\n    db.transaction((tx) => {\n        tx.executeSql('Delete from CompletedWorkouts');\n    });\n    db.transaction((tx) => {\n        tx.executeSql('Delete from Exercises');\n    });\n    db.transaction((tx) => {\n        tx.executeSql('Delete from CompletedExercises');\n    });\n    db.transaction((tx) => {\n        tx.executeSql('Delete from routines');\n    });\n\n    db.transaction((tx) => {\n        tx.executeSql('Delete from ExercisesWithinRoutines');\n    });\n    //console.log(\"sqllog\", \"db cleared\")\n    callback()\n}\n\nexport function logDataBase(callback) {\n\n    //logs workout table\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from CompletedWorkouts;\",[],(_,rows) =>{\n            console.log(\"sqllog_Workouts\", rows.rows)\n        })\n    })\n\n    //logs CompletedExercises table\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from CompletedExercises;\",[],(_,rows) =>{\n            console.log(\"sqllog_CompletedExercises\", rows.rows)\n        })\n    })\n\n    //logs Exercises table\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from Exercises;\",[],(_,rows) =>{\n            console.log(\"sqllog_Exercises\", rows.rows)\n        })\n    })\n\n    //logs routines table\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from routines;\",[],(_,rows) =>{\n            console.log(\"sqllog_routines\", rows.rows)\n        })\n    })\n\n    //logs ExercisesWithinRoutines table\n    db.transaction(tx =>{\n        tx.executeSql(\"select * from ExercisesWithinRoutines;\",[],(_,rows) =>{\n            console.log(\"sqllog_ExercisesWithinRoutines\", rows.rows)\n        })\n    })\n\n    callback()\n}\n"]},"metadata":{},"sourceType":"script"}