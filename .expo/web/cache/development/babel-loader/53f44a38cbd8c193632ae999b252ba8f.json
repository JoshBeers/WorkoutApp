{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _Colors = _interopRequireDefault(require(\"../Themes/Colors\"));\n\nvar _Styles = require(\"../Themes/Styles\");\n\nvar _Routine = require(\"../Classes/Routine\");\n\nvar navigation = _interopRequireWildcard(require(\"react-navigation\"));\n\nvar _ViewAndEditSingleRoutine = _interopRequireDefault(require(\"./ViewAndEditSingleRoutine\"));\n\nvar _createNativeStackNavigator = _interopRequireDefault(require(\"react-native-screens/src/native-stack/navigators/createNativeStackNavigator\"));\n\nvar _jsxFileName = \"/Users/Anne/WebstormProjects/WorkoutApp/Screens/ChooseAndViewAllRoutinesScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ChooseAndViewAllRoutinesScreen = function (_React$Component) {\n  (0, _inherits2.default)(ChooseAndViewAllRoutinesScreen, _React$Component);\n\n  var _super = _createSuper(ChooseAndViewAllRoutinesScreen);\n\n  function ChooseAndViewAllRoutinesScreen() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ChooseAndViewAllRoutinesScreen);\n    _this = _super.call(this);\n    _this.state = {\n      routineList: [],\n      loadingTrue: true\n    };\n    (0, _Routine.getAllRoutinesWithOutExercises)();\n    console.log('test');\n    return _this;\n  }\n\n  (0, _createClass2.default)(ChooseAndViewAllRoutinesScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log('test');\n      (0, _Routine.getAllRoutinesWithOutExercises)(function (result) {\n        _this2.setState({\n          routineList: result\n        }, function () {\n          console.log(this.state.routineList);\n        });\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(data) {\n      var _this3 = this;\n\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.seeDetails(data.item.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNativeElements.Card, {\n        containerStyle: _Styles.listStyle.item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, data.item.name)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          routineList = _this$state.routineList,\n          loading = _this$state.loading;\n\n      if (!loading) {\n        return _react.default.createElement(_reactNative.View, {\n          style: _Styles.listStyle.screen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: _Styles.listStyle.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: _Styles.listStyle.titleText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        }, \"Saved Routines\")), _react.default.createElement(_reactNative.FlatList, {\n          data: this.state.routineList,\n          renderItem: this.renderItem,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return _react.default.createElement(_reactNative.ActivityIndicator, {\n          size: \"large\",\n          color: _Colors.default.btn,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n  return ChooseAndViewAllRoutinesScreen;\n}(_react.default.Component);\n\nexports.default = ChooseAndViewAllRoutinesScreen;","map":{"version":3,"sources":["/Users/Anne/WebstormProjects/WorkoutApp/Screens/ChooseAndViewAllRoutinesScreen.js"],"names":["ChooseAndViewAllRoutinesScreen","state","routineList","loadingTrue","console","log","result","setState","data","seeDetails","item","id","listStyle","name","loading","screen","container","titleText","renderItem","Colors","btn","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEqBA,8B;;;;;AAOnB,4CAAc;AAAA;;AAAA;AACZ;AADY,UANdC,KAMc,GANN;AACNC,MAAAA,WAAW,EAAE,EADP;AAGNC,MAAAA,WAAW,EAAE;AAHP,KAMM;AAEZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAHY;AAIb;;;;wCAImB;AAAA;;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,mDAA+B,UAACC,MAAD,EAAY;AACzC,QAAA,MAAI,CAACC,QAAL,CACE;AACEL,UAAAA,WAAW,EAAEI;AADf,SADF,EAIE,YAAY;AACVF,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWC,WAAvB;AACD,SANH;AAQD,OATD;AAUD;;;+BAGUM,I,EAAM;AAAA;;AACf,aACE,6BAAC,6BAAD;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,UAAL,CAAgBD,IAAI,CAACE,IAAL,CAAUC,EAA1B,CAAN;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,yBAAD;AAAM,QAAA,cAAc,EAAEC,kBAAUF,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,IAAI,CAACE,IAAL,CAAUG,IAAjB,CADF,CADF,CADF;AAOD;;;6BAEQ;AAAA,wBACwB,KAAKZ,KAD7B;AAAA,UACAC,WADA,eACAA,WADA;AAAA,UACaY,OADb,eACaA,OADb;;AAGP,UAAI,CAACA,OAAL,EAAc;AACZ,eACE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEF,kBAAUG,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEH,kBAAUI,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,6BAAC,iBAAD;AAAM,UAAA,KAAK,EAAEJ,kBAAUK,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,CADF,EAIE,6BAAC,qBAAD;AACE,UAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWC,WADnB;AAEE,UAAA,UAAU,EAAE,KAAKgB,UAFnB;AAGE,UAAA,YAAY,EAAE,sBAACR,IAAD;AAAA,mBAAUA,IAAI,CAACC,EAAf;AAAA,WAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF;AAYD,OAbD,MAaO;AACL,eAAO,6BAAC,8BAAD;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,KAAK,EAAEQ,gBAAOC,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;EA3DyDC,eAAMC,S","sourcesContent":["import React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  FlatList,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport * as SQLite from 'expo-sqlite';\nimport {Card} from 'react-native-elements';\nimport Colors from '../Themes/Colors';\nimport {listStyle} from '../Themes/Styles';\nimport {getAllRoutinesWithOutExercises} from '../Classes/Routine';\nimport * as navigation from 'react-navigation';\nimport ViewAndEditSingleRoutine from './ViewAndEditSingleRoutine';\nimport NativeStackNavigator from 'react-native-screens/src/native-stack/navigators/createNativeStackNavigator';\n\nexport default class ChooseAndViewAllRoutinesScreen extends React.Component {\n  state = {\n    routineList: [],\n    // loading state where when data retrieve returns data\n    loadingTrue: true,\n  };\n\n  constructor() {\n    super();\n    getAllRoutinesWithOutExercises();\n    console.log('test');\n  }\n\n  //method returns a list of routines\n  //has not been tested\n  componentDidMount() {\n    console.log('test');\n    getAllRoutinesWithOutExercises((result) => {\n      this.setState(\n        {\n          routineList: result,\n        },\n        function () {\n          console.log(this.state.routineList);\n        },\n      );\n    });\n  }\n\n  // callback for the flatlist for rendering each item, and pass data as argument\n  renderItem(data) {\n    return (\n      <TouchableOpacity onPress={() => this.seeDetails(data.item.id)}>\n        <Card containerStyle={listStyle.item}>\n          <Text>{data.item.name}</Text>\n        </Card>\n      </TouchableOpacity>\n    );\n  }\n\n  render() {\n    const {routineList, loading} = this.state;\n\n    if (!loading) {\n      return (\n        <View style={listStyle.screen}>\n          <View style={listStyle.container}>\n            <Text style={listStyle.titleText}>Saved Routines</Text>\n          </View>\n          <FlatList\n            data={this.state.routineList}\n            renderItem={this.renderItem}\n            keyExtractor={(item) => item.id}\n          />\n        </View>\n      );\n    } else {\n      return <ActivityIndicator size=\"large\" color={Colors.btn} />;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}