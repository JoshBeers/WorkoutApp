{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNewRoutine = addNewRoutine;\nexports.getSpecificRoutine = getSpecificRoutine;\nexports.getAllRoutinesWithOutExercises = getAllRoutinesWithOutExercises;\nexports.Routine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _Exercise = require(\"./Exercise\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar Routine = function Routine(id, name, placeInOrder, exercises) {\n  (0, _classCallCheck2.default)(this, Routine);\n  this.id = id;\n  this.name = name;\n  this.placeInOrder = placeInOrder;\n  this.exercises = exercises;\n};\n\nexports.Routine = Routine;\n\nfunction addNewRoutine(routine, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into routines(name,placeOnList) values('\" + routine.name + \"',\" + routine.placeInOrder + \");\", [], function () {\n      _App.db.transaction(function (tx) {\n        tx.executeSql(\"select Max(ID) from routines;\", [], function (_, rows) {});\n      });\n    });\n  });\n}\n\nfunction getSpecificRoutine(routineID) {\n  var tempRoutine = new Routine();\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines where ID =\" + routineID + \";\", [], function (_, rows) {\n      tempRoutine.name = rows.rows[0].name;\n      tempRoutine.placeInOrder = rows.rows[0].placeInOrder;\n    });\n  });\n\n  tempRoutine.exercises = (0, _Exercise.getExerciseFromRoutine)(routineID);\n  return tempRoutine;\n}\n\nfunction getAllRoutinesWithOutExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines;\", [], function (_, rows) {\n      var tempRoutines = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempRoutines.push(new Routine(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).placeInOrder, []));\n      }\n\n      if (callback != null) {\n        callback(tempRoutines);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Routine.js"],"names":["Routine","id","name","placeInOrder","exercises","addNewRoutine","routine","callback","db","transaction","tx","executeSql","_","rows","getSpecificRoutine","routineID","tempRoutine","getAllRoutinesWithOutExercises","tempRoutines","i","length","push","item","ID"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;IAGaA,O,GACT,iBAAYC,EAAZ,EAAgBC,IAAhB,EAAqBC,YAArB,EAAkCC,SAAlC,EAAqE;AAAA;AACjE,OAAKH,EAAL,GAAUA,EAAV;AACA,OAAKC,IAAL,GAAWA,IAAX;AACA,OAAKC,YAAL,GAAmBA,YAAnB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACH,C;;;;AAGE,SAASC,aAAT,CAAuBC,OAAvB,EAAuCC,QAAvC,EAAgD;AAEnDC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,oDAAkDL,OAAO,CAACJ,IAA1D,GAA+D,IAA/D,GAAoEI,OAAO,CAACH,YAA5E,GAAyF,IAAvG,EAA4G,EAA5G,EAA+G,YAAU;AAErHK,cAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,QAAAA,EAAE,CAACC,UAAH,CAAc,+BAAd,EAA8C,EAA9C,EAAiD,UAACC,CAAD,EAAGC,IAAH,EAAU,CAG1D,CAHD;AAIH,OALD;AAMH,KARD;AASH,GAVD;AAWH;;AAOM,SAASC,kBAAT,CAA4BC,SAA5B,EAAsC;AACzC,MAAIC,WAAW,GAAG,IAAIhB,OAAJ,EAAlB;;AACAQ,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,sCAAqCI,SAArC,GAAgD,GAA9D,EAAkE,EAAlE,EAAqE,UAACH,CAAD,EAAGC,IAAH,EAAW;AAC5EG,MAAAA,WAAW,CAACd,IAAZ,GAAmBW,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaX,IAAhC;AACAc,MAAAA,WAAW,CAACb,YAAZ,GAA2BU,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaV,YAAxC;AACH,KAHD;AAIH,GALD;;AAMAa,EAAAA,WAAW,CAACZ,SAAZ,GAAwB,sCAAuBW,SAAvB,CAAxB;AACA,SAAOC,WAAP;AACH;;AAEM,SAASC,8BAAT,CAAwCV,QAAxC,EAAiD;AACpDC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,yBAAd,EAAwC,EAAxC,EAA2C,UAACC,CAAD,EAAGC,IAAH,EAAW;AAClD,UAAIK,YAAY,GAAG,EAAnB;;AAGA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACN,IAAI,CAACA,IAAL,CAAUO,MAA1B,EAAiCD,CAAC,EAAlC,EAAqC;AAEjCD,QAAAA,YAAY,CAACG,IAAb,CAAkB,IAAIrB,OAAJ,CAAYa,IAAI,CAACA,IAAL,CAAUS,IAAV,CAAeH,CAAf,EAAkBI,EAA9B,EAAiCV,IAAI,CAACA,IAAL,CAAUS,IAAV,CAAeH,CAAf,EAAkBjB,IAAnD,EAAwDW,IAAI,CAACA,IAAL,CAAUS,IAAV,CAAeH,CAAf,EAAkBhB,YAA1E,EAAwF,EAAxF,CAAlB;AACH;;AAED,UAAGI,QAAQ,IAAI,IAAf,EAAoB;AAChBA,QAAAA,QAAQ,CAACW,YAAD,CAAR;AACH;AAEJ,KAbD;AAcH,GAfD;AAkBH","sourcesContent":["import {addExerciseToRoutine, ExerciseWithinRoutine, getExerciseFromRoutine} from \"./Exercise\";\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\nimport {call} from \"react-native-reanimated\";\r\n\r\n\r\nexport class Routine{\r\n    constructor(id, name,placeInOrder,exercises:ExerciseWithinRoutine[]) {\r\n        this.id = id\r\n        this.name= name\r\n        this.placeInOrder =placeInOrder\r\n        this.exercises = exercises\r\n    }\r\n}\r\n\r\nexport function addNewRoutine(routine:Routine,callback){\r\n    //adds routine\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into routines(name,placeOnList) values('\"+routine.name+\"',\"+routine.placeInOrder+\");\",[],function(){\r\n\r\n            db.transaction(tx =>{\r\n                tx.executeSql(\"select Max(ID) from routines;\",[],(_,rows)=>{\r\n\r\n                    //addMultiple(rows.rows.item(0).ID,routine.exercises,0, callback)\r\n                })\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getSpecificRoutine(routineID){\r\n    let tempRoutine = new Routine()\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines where ID =\"+ routineID +\";\",[],(_,rows) =>{\r\n            tempRoutine.name = rows.rows[0].name\r\n            tempRoutine.placeInOrder = rows.rows[0].placeInOrder\r\n        })\r\n    })\r\n    tempRoutine.exercises = getExerciseFromRoutine(routineID)\r\n    return tempRoutine\r\n}\r\n\r\nexport function getAllRoutinesWithOutExercises(callback){\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines;\",[],(_,rows) =>{\r\n            let tempRoutines = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempRoutines.push(new Routine(rows.rows.item(i).ID,rows.rows.item(i).name,rows.rows.item(i).placeInOrder, []))\r\n            }\r\n           // tempRoutines.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempRoutines)\r\n            }\r\n\r\n        })\r\n    })\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}