{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNewRoutine = addNewRoutine;\nexports.getSpecificRoutine = getSpecificRoutine;\nexports.Routine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _Exercise = require(\"./Exercise\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar Routine = function Routine(id, name, placeInOrder, exercises) {\n  (0, _classCallCheck2.default)(this, Routine);\n  this.id = id;\n  this.name = name;\n  this.placeInOrder = placeInOrder;\n  this.exercises = exercises;\n};\n\nexports.Routine = Routine;\n\nfunction addNewRoutine(routine) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into routines(name,placeOnList) values('\" + routine.name + \"',\" + routine.placeInOrder + \");\");\n  });\n\n  var routineId = null;\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select MAX(ID) from routines;\", [], function (_, rows) {\n      console.log(\"sqllog_routines\", rows.rows);\n      routineId = rows.rows[0];\n    });\n  });\n\n  if (routineId == null) {\n    throw new Error(\"no routines in db\");\n  }\n\n  routine.exercises.forEach(function (exercise) {\n    return (0, _Exercise.addExerciseToRoutine)(routineId, exercise);\n  });\n}\n\nfunction getSpecificRoutine(routineID) {\n  var tempRoutine = new Routine();\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines where ID =\" + routineID + \";\", [], function (_, rows) {\n      tempRoutine.name = rows.rows[0].name;\n      tempRoutine.placeInOrder = rows.rows[0].placeInOrder;\n    });\n  });\n\n  tempRoutine.exercises = (0, _Exercise.getExerciseFromRoutine)(routineID);\n  return tempRoutine;\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Routine.js"],"names":["Routine","id","name","placeInOrder","exercises","addNewRoutine","routine","db","transaction","tx","executeSql","routineId","_","rows","console","log","Error","forEach","exercise","getSpecificRoutine","routineID","tempRoutine"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEaA,O,GACT,iBAAYC,EAAZ,EAAgBC,IAAhB,EAAqBC,YAArB,EAAkCC,SAAlC,EAAqE;AAAA;AACjE,OAAKH,EAAL,GAAUA,EAAV;AACA,OAAKC,IAAL,GAAWA,IAAX;AACA,OAAKC,YAAL,GAAmBA,YAAnB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACH,C;;;;AAGE,SAASC,aAAT,CAAuBC,OAAvB,EAAuC;AAE1CC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,oDAAkDJ,OAAO,CAACJ,IAA1D,GAA+D,IAA/D,GAAoEI,OAAO,CAACH,YAA5E,GAAyF,IAAvG;AACH,GAFD;;AAKA,MAAIQ,SAAS,GAAG,IAAhB;;AACAJ,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,+BAAd,EAA8C,EAA9C,EAAiD,UAACE,CAAD,EAAGC,IAAH,EAAW;AACxDC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAAI,CAACA,IAApC;AACAF,MAAAA,SAAS,GAAGE,IAAI,CAACA,IAAL,CAAU,CAAV,CAAZ;AACH,KAHD;AAIH,GALD;;AAOA,MAAGF,SAAS,IAAE,IAAd,EAAmB;AACf,UAAO,IAAIK,KAAJ,CAAU,mBAAV,CAAP;AACH;;AAEDV,EAAAA,OAAO,CAACF,SAAR,CAAkBa,OAAlB,CAA2B,UAAAC,QAAQ;AAAA,WAAI,oCAAqBP,SAArB,EAAgCO,QAAhC,CAAJ;AAAA,GAAnC;AACH;;AAEM,SAASC,kBAAT,CAA4BC,SAA5B,EAAsC;AACzC,MAAIC,WAAW,GAAG,IAAIrB,OAAJ,EAAlB;;AACAO,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAG;AAChBA,IAAAA,EAAE,CAACC,UAAH,CAAc,sCAAqCU,SAArC,GAAgD,GAA9D,EAAkE,EAAlE,EAAqE,UAACR,CAAD,EAAGC,IAAH,EAAW;AAC5EQ,MAAAA,WAAW,CAACnB,IAAZ,GAAmBW,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaX,IAAhC;AACAmB,MAAAA,WAAW,CAAClB,YAAZ,GAA2BU,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaV,YAAxC;AACH,KAHD;AAIH,GALD;;AAMAkB,EAAAA,WAAW,CAACjB,SAAZ,GAAwB,sCAAuBgB,SAAvB,CAAxB;AACA,SAAOC,WAAP;AACH","sourcesContent":["import {addExerciseToRoutine, ExerciseWithinRoutine, getExerciseFromRoutine} from \"./Exercise\";\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\n\r\nexport class Routine{\r\n    constructor(id, name,placeInOrder,exercises:ExerciseWithinRoutine[]) {\r\n        this.id = id\r\n        this.name= name\r\n        this.placeInOrder =placeInOrder\r\n        this.exercises = exercises\r\n    }\r\n}\r\n\r\nexport function addNewRoutine(routine:Routine){\r\n    //adds routine\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into routines(name,placeOnList) values('\"+routine.name+\"',\"+routine.placeInOrder+\");\",)\r\n    })\r\n\r\n    //gets the id of the last added routine\r\n    let routineId = null;\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select MAX(ID) from routines;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_routines\", rows.rows)\r\n            routineId = rows.rows[0]\r\n        })\r\n    })\r\n\r\n    if(routineId==null){\r\n        throw  new Error(\"no routines in db\")\r\n    }\r\n\r\n    routine.exercises.forEach( exercise => addExerciseToRoutine(routineId, exercise))\r\n}\r\n\r\nexport function getSpecificRoutine(routineID){\r\n    let tempRoutine = new Routine()\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines where ID =\"+ routineID +\";\",[],(_,rows) =>{\r\n            tempRoutine.name = rows.rows[0].name\r\n            tempRoutine.placeInOrder = rows.rows[0].placeInOrder\r\n        })\r\n    })\r\n    tempRoutine.exercises = getExerciseFromRoutine(routineID)\r\n    return tempRoutine\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}