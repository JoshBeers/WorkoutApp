{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addExerciseToRoutine = addExerciseToRoutine;\nexports.addMultipleExercisesToRoutine = addMultipleExercisesToRoutine;\nexports.deleteExercisesUnderARoutine = deleteExercisesUnderARoutine;\nexports.deleteExerciseFromRoutine = deleteExerciseFromRoutine;\nexports.getExerciseFromRoutine = getExerciseFromRoutine;\nexports.getAllExercisesWithinRoutines = getAllExercisesWithinRoutines;\nexports.createNewExerciseFromExercise = createNewExerciseFromExercise;\nexports.getAllExercises = getAllExercises;\nexports.deleteExerciseById = deleteExerciseById;\nexports.getAllCompleteExerciseBySpecificExerciseID = getAllCompleteExerciseBySpecificExerciseID;\nexports.getCompletedExercisesForWorkout = getCompletedExercisesForWorkout;\nexports.saveExerciseFromCompletedExercises = saveExerciseFromCompletedExercises;\nexports.addMultipleCompleteExercisesToCompleteWorkout = addMultipleCompleteExercisesToCompleteWorkout;\nexports.getAverageMetricsForExercise = getAverageMetricsForExercise;\nexports.ExerciseStats = exports.CompleteExercise = exports.Exercise = exports.ExerciseWithinRoutine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar _Workout = require(\"./Workout\");\n\nvar ExerciseWithinRoutine = function ExerciseWithinRoutine(ID, exerciseID, routineId, placeInOrder, name) {\n  (0, _classCallCheck2.default)(this, ExerciseWithinRoutine);\n  this.ID = ID;\n  this.exerciseID = exerciseID;\n  this.routineId = routineId;\n  this.placeInOrder = placeInOrder;\n  this.name = name;\n};\n\nexports.ExerciseWithinRoutine = ExerciseWithinRoutine;\n\nfunction addExerciseToRoutine(routineID, exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\", [exercise.exerciseID, routineID, exercise.placeInOrder], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction addMultipleExercisesToRoutine(routineID, exercises, callback) {\n  for (var i = 0; i < exercises.length; i++) {\n    if (i == exercises.length - 1) {\n      addExerciseToRoutine(routineID, exercises[i], function () {\n        callback();\n      });\n    } else {\n      addExerciseToRoutine(routineID, exercises[i]);\n    }\n  }\n}\n\nfunction deleteExercisesUnderARoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where routineID = ? ;\", [routineID], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction deleteExerciseFromRoutine(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\", [exercise.ID], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getExerciseFromRoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines inner join Exercises on ExercisesWithinRoutines.exerciseID = Exercises.ID where routineID =\" + routineID + \";\", [], function (_, rows) {\n      console.log(\"sqllog_method_getExerciseFromRoutine_rows\", rows.rows);\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder, rows.rows.item(i).name));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getAllExercisesWithinRoutines(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nvar Exercise = function Exercise(exerciseID, name, description, doesUseWeight, isCardio) {\n  (0, _classCallCheck2.default)(this, Exercise);\n  this.exerciseID = exerciseID;\n  this.name = name;\n  this.description = description;\n  this.doesUseWeight = doesUseWeight;\n  this.isCardio = isCardio;\n};\n\nexports.Exercise = Exercise;\n\nfunction createNewExerciseFromExercise(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(name,description,doesUseWeight,isCardio) values('\" + exercise.name + \"','\" + exercise.description + \"',\" + exercise.doesUseWeight + \",\" + exercise.isCardio + \");\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getAllExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight, rows.rows.item(i).isCardio));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction deleteExerciseById(id, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"delete from Exercises where ID = \" + id + \";\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nvar CompleteExercise = function CompleteExercise(ID, exerciseId, workoutID, numberOfReps, numberOfSets, averageWeight, date) {\n  (0, _classCallCheck2.default)(this, CompleteExercise);\n  this.ID = ID;\n  this.exerciseId = exerciseId;\n  this.exerciseName = exerciseName;\n  this.workoutID = workoutID;\n  this.numberOfReps = numberOfReps;\n  this.numberOfSets = numberOfSets;\n  this.averageWeight = averageWeight;\n  this.date = date;\n};\n\nexports.CompleteExercise = CompleteExercise;\n\nfunction getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback) {\n  (0, _Workout.getMapOfCompleteWorkoutIDsToDates)(function (result) {\n    var map = result;\n    getCompleteExercisesForSpecificExerciseID(exerciseID, function (result) {\n      var tempExercises = result;\n\n      for (var i = 0; i < result.length; i++) {\n        tempExercises[i].date = map.get(result[i].workoutID);\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getCompletedExercisesForWorkout(workoutID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises where workOutID = ?;\", [workoutID], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction saveExerciseFromCompletedExercises(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,averageWeight,workOutID) values('\" + exercise.exerciseId + \"',\" + exercise.numberOfReps + \",\" + exercise.numberOfSets + \",\" + exercise.averageWeight + \",\" + exercise.workoutID + \");\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction addMultipleCompleteExercisesToCompleteWorkout(completeWorkout, callback) {\n  for (var i = 0; i < completeWorkout.completedExercises.length; i++) {\n    completeWorkout.completedExercises[i].workoutID = completeWorkout.ID;\n\n    if (i == completeWorkout.completedExercises.length - 1) {\n      saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i], function () {\n        callback();\n      });\n    } else {\n      saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i]);\n    }\n  }\n}\n\nvar ExerciseStats = function ExerciseStats(exerciseId, name, averageNumberOfReps, averageNumberOfSets, averageWeight) {\n  (0, _classCallCheck2.default)(this, ExerciseStats);\n  this.exerciseId = exerciseId;\n  this.exerciseName = name;\n  this.averageNumberOfReps = averageNumberOfReps;\n  this.averageNumberOfSets = averageNumberOfSets;\n  this.averageWeight = averageWeight;\n};\n\nexports.ExerciseStats = ExerciseStats;\n\nfunction getAverageMetricsForExercise(exerciseID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select AVG(numberOfReps) as averageNumberOfReps, avg(numberOfSets) as averageNumberOfSets, avg(averageWeight) as averageWeight, Exercises.name as Name from CompletedExercises inner join Exercises on CompletedExercises.exerciseId = Exercises.ID where exerciseId = ?;\", [exerciseID], function (_, rows) {\n      console.log(\"sqllog_method_getAverageMetricsForExercise\", rows.rows);\n\n      if (callback) {\n        callback(new ExerciseStats(exerciseID, rows.rows.item(0).Name, rows.rows.item(0).averageNumberOfReps, rows.rows.item(0).averageNumberOfSets, rows.rows.item(0).averageWeight));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Exercise.js"],"names":["ExerciseWithinRoutine","ID","exerciseID","routineId","placeInOrder","name","addExerciseToRoutine","routineID","exercise","callback","db","transaction","tx","executeSql","_","rows","addMultipleExercisesToRoutine","exercises","i","length","deleteExercisesUnderARoutine","deleteExerciseFromRoutine","getExerciseFromRoutine","console","log","tempExercises","push","item","getAllExercisesWithinRoutines","sort","a","b","Exercise","description","doesUseWeight","isCardio","createNewExerciseFromExercise","getAllExercises","deleteExerciseById","id","CompleteExercise","exerciseId","workoutID","numberOfReps","numberOfSets","averageWeight","date","exerciseName","getAllCompleteExerciseBySpecificExerciseID","result","map","getCompleteExercisesForSpecificExerciseID","get","workOutID","getCompletedExercisesForWorkout","saveExerciseFromCompletedExercises","addMultipleCompleteExercisesToCompleteWorkout","completeWorkout","completedExercises","ExerciseStats","averageNumberOfReps","averageNumberOfSets","getAverageMetricsForExercise","Name"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\nimport {CompletedWorkout, getMapOfCompleteWorkoutIDsToDates} from \"./Workout\";\r\n\r\n\r\n/*\r\nstuff for exerciuses that are wiuthin a routine\r\n\r\n */\r\nexport class ExerciseWithinRoutine{\r\n    constructor(ID,exerciseID, routineId, placeInOrder, name) {\r\n        this.ID = ID\r\n        this.exerciseID = exerciseID\r\n        this.routineId = routineId\r\n        this.placeInOrder = placeInOrder\r\n        this.name = name\r\n    }\r\n}\r\n\r\n//tested\r\nexport function addExerciseToRoutine(routineID,exercise, callback){\r\n    //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n        db.transaction(tx => {\r\n            //insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\r\n            tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\",[exercise.exerciseID,routineID,exercise.placeInOrder],(_,rows) =>{\r\n               // console.log(\"sqllog_method_addExerciseToRoutine\")\r\n                if (callback != null) {\r\n                    callback()\r\n                }\r\n            })\r\n\r\n\r\n        })\r\n}\r\n\r\nexport function addMultipleExercisesToRoutine(routineID,exercises, callback){\r\n    for(let i = 0; i<exercises.length ; i++){\r\n        if(i == exercises.length-1){\r\n            addExerciseToRoutine(routineID, exercises[i], function (){\r\n                callback()\r\n            })\r\n        }else{\r\n            addExerciseToRoutine(routineID, exercises[i])\r\n        }\r\n        //console.log(\"sqllog_method_addExercisesToRoutine\",i)\r\n    }\r\n}\r\n\r\nexport function deleteExercisesUnderARoutine(routineID,callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where routineID = ? ;\",[routineID], (_,rows) =>{\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n//tested\r\n/*\r\n\r\n */\r\nexport function deleteExerciseFromRoutine(exercise:ExerciseWithinRoutine, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\",[exercise.ID], (_,rows) =>{\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n//tested\r\nexport function getExerciseFromRoutine(routineID, callback){\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines inner join Exercises on ExercisesWithinRoutines.exerciseID = Exercises.ID where routineID =\"+ routineID +\";\",[],(_,rows) => {\r\n            console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder,rows.rows.item(i).name))\r\n            }\r\n           // tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function getAllExercisesWithinRoutines(callback){\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines;\",[],(_,rows) => {\r\n             //console.log(\"sqllog_method_getAllExercisesWithinRoutines_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\r\n            }\r\n            tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n/*\r\nstuff for exercises that are bases to be added to routines\r\n\r\n */\r\n\r\nexport class Exercise{\r\n    constructor(exerciseID:number , name: string, description:string, doesUseWeight:boolean, isCardio:boolean) {\r\n        this.exerciseID = exerciseID\r\n        this.name = name\r\n        this.description = description\r\n        this.doesUseWeight = doesUseWeight\r\n        this.isCardio = isCardio\r\n    }\r\n}\r\n\r\n//tested\r\nexport function createNewExerciseFromExercise(exercise: Exercise, callback){\r\n    //'Create table if not exists Exercises(ID integer primary key DESC, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"insert into Exercises(name,description,doesUseWeight,isCardio) values('\" +\r\n            exercise.name + \"','\" +\r\n            exercise.description + \"',\" +\r\n            exercise.doesUseWeight +\",\" +\r\n            exercise.isCardio +\r\n            \");\",[],(_,rows) =>{\r\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n//tested\r\nexport function getAllExercises(callback) {\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from Exercises;\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight,rows.rows.item(i).isCardio))\r\n            }\r\n            tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\n//tested\r\nexport function deleteExerciseById(id, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"delete from Exercises where ID = \"+id+\";\", [], (_,rows) =>{\r\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n/*\r\ncompleted exercise stuff\r\n\r\nCompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,averageWeight integer, workOutID int not null,\r\n*/\r\nexport class CompleteExercise{\r\n    constructor(ID: number, exerciseId: number ,workoutID:number, numberOfReps:number , numberOfSets:number, averageWeight, date) {\r\n        this.ID =ID\r\n        this.exerciseId = exerciseId\r\n        this.exerciseName = exerciseName\r\n        this.workoutID = workoutID\r\n        this.numberOfReps = numberOfReps\r\n        this.numberOfSets = numberOfSets\r\n        this.averageWeight = averageWeight\r\n        this.date = date\r\n    }\r\n}\r\n\r\nexport function getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback){\r\n    getMapOfCompleteWorkoutIDsToDates(function (result){\r\n        let map = result\r\n\r\n        getCompleteExercisesForSpecificExerciseID(exerciseID, function (result){\r\n            let tempExercises = result\r\n\r\n            for(let i = 0 ; i< result.length; i++){\r\n                tempExercises[i].date = map.get(result[i].workoutID)\r\n            }\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID,callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], (_, rows) => {\r\n            //console.log(\"sqllog_method_getCompleteExercisesForSpecificExerciseID_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null))\r\n            }\r\n\r\n\r\n            //tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function getCompletedExercisesForWorkout(workoutID,callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedExercises where workOutID = ?;\", [workoutID], (_, rows) => {\r\n            //console.log(\"sqllog_method_getCompleteExercisesForSpecificExerciseID_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null))\r\n            }\r\n            //tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function saveExerciseFromCompletedExercises(exercise:CompleteExercise, callback) {\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,averageWeight,workOutID) values('\" +\r\n        exercise.exerciseId + \"',\" +\r\n        exercise.numberOfReps + \",\" +\r\n        exercise.numberOfSets + \",\" +\r\n        exercise.averageWeight + \",\" +\r\n        exercise.workoutID +\r\n        \");\",[],(_,rows) =>{\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function addMultipleCompleteExercisesToCompleteWorkout(completeWorkout:CompletedWorkout, callback){\r\n    for(let i = 0; i<completeWorkout.completedExercises.length ; i++){\r\n        completeWorkout.completedExercises[i].workoutID = completeWorkout.ID\r\n        if(i == completeWorkout.completedExercises.length-1){\r\n            saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i], function (){\r\n                callback()\r\n            })\r\n        }else{\r\n            saveExerciseFromCompletedExercises(completeWorkout.completedExercises[i])\r\n        }\r\n        //console.log(\"sqllog_method_addExercisesToRoutine\",i)\r\n    }\r\n}\r\n\r\nexport class ExerciseStats{\r\n    constructor(exerciseId,name, averageNumberOfReps, averageNumberOfSets, averageWeight) {\r\n        this.exerciseId = exerciseId\r\n        this.exerciseName = name\r\n        this.averageNumberOfReps = averageNumberOfReps\r\n        this.averageNumberOfSets = averageNumberOfSets\r\n        this.averageWeight = averageWeight\r\n    }\r\n}\r\n//\r\nexport function getAverageMetricsForExercise(exerciseID,callback){\r\n    //console.log(\"sqllog_method_getAverageMetricsForExercise\",exerciseID)\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select AVG(numberOfReps) as averageNumberOfReps, avg(numberOfSets) as averageNumberOfSets, avg(averageWeight) as averageWeight, Exercises.name as Name from CompletedExercises inner join Exercises on CompletedExercises.exerciseId = Exercises.ID where exerciseId = ?;\", [exerciseID], (_, rows) => {\r\n            console.log(\"sqllog_method_getAverageMetricsForExercise\",rows.rows)\r\n            if(callback){\r\n               callback(new ExerciseStats(exerciseID, rows.rows.item(0).Name,rows.rows.item(0).averageNumberOfReps, rows.rows.item(0).averageNumberOfSets, rows.rows.item(0).averageWeight))\r\n           }\r\n        })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}