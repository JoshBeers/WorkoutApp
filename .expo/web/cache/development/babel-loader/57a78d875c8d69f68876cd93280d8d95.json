{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _jsxFileName = \"D:\\\\Dell\\\\Documents\\\\SCHOOL SHIT\\\\FALL 2020\\\\Software Dev Project\\\\WorkoutApp\\\\node_modules\\\\@react-navigation\\\\bottom-tabs\\\\src\\\\views\\\\ResourceSavingScene.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FAR_FAR_AWAY = 30000;\n\nvar ResourceSavingScene = function (_React$Component) {\n  (0, _inherits2.default)(ResourceSavingScene, _React$Component);\n\n  var _super = _createSuper(ResourceSavingScene);\n\n  function ResourceSavingScene() {\n    (0, _classCallCheck2.default)(this, ResourceSavingScene);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ResourceSavingScene, [{\n    key: \"render\",\n    value: function render() {\n      if ((_reactNativeScreens.screensEnabled == null ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && _reactNative.Platform.OS !== 'web') {\n        var _this$props = this.props,\n            _isVisible = _this$props.isVisible,\n            _rest = (0, _objectWithoutProperties2.default)(_this$props, [\"isVisible\"]);\n\n        if (_reactNativeScreens.shouldUseActivityState) {\n          return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({\n            activityState: _isVisible ? 2 : 0\n          }, _rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 11\n            }\n          }));\n        } else {\n          return React.createElement(_reactNativeScreens.Screen, (0, _extends2.default)({\n            active: _isVisible ? 1 : 0\n          }, _rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 11\n            }\n          }));\n        }\n      }\n\n      var _this$props2 = this.props,\n          isVisible = _this$props2.isVisible,\n          children = _this$props2.children,\n          style = _this$props2.style,\n          rest = (0, _objectWithoutProperties2.default)(_this$props2, [\"isVisible\", \"children\", \"style\"]);\n      return React.createElement(_reactNative.View, (0, _extends2.default)({\n        style: [styles.container, _reactNative.Platform.OS === 'web' ? {\n          display: isVisible ? 'flex' : 'none'\n        } : null, style],\n        collapsable: false,\n        removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? !isVisible : true,\n        pointerEvents: isVisible ? 'auto' : 'none'\n      }, rest, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      }), React.createElement(_reactNative.View, {\n        style: isVisible ? styles.attached : styles.detached,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, children));\n    }\n  }]);\n  return ResourceSavingScene;\n}(React.Component);\n\nexports.default = ResourceSavingScene;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["D:/Dell/Documents/SCHOOL SHIT/FALL 2020/Software Dev Project/WorkoutApp/node_modules/@react-navigation/bottom-tabs/src/views/ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","ResourceSavingScene","Platform","OS","props","isVisible","rest","shouldUseActivityState","children","style","styles","container","display","attached","detached","React","Component","StyleSheet","create","flex","overflow","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAcA,IAAMA,YAAY,GAAG,KAArB;;IAEqBC,mB;;;;;;;;;;;;6BACV;AAEP,UAAI,qGAAsBC,sBAASC,EAAT,KAAgB,KAA1C,EAAiD;AAAA,0BAChB,KAAKC,KADW;AAAA,YACvCC,UADuC,eACvCA,SADuC;AAAA,YACzBC,KADyB;;AAG/C,YAAIC,0CAAJ,EAA4B;AAC1B,iBAEE,oBAAC,0BAAD;AAAQ,YAAA,aAAa,EAAEF,UAAS,GAAG,CAAH,GAAO;AAAvC,aAA8CC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF;AAID,SALD,MAKO;AACL,iBAEE,oBAAC,0BAAD;AAAQ,YAAA,MAAM,EAAED,UAAS,GAAG,CAAH,GAAO;AAAhC,aAAuCC,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF;AAID;AACF;;AAhBM,yBAkByC,KAAKF,KAlB9C;AAAA,UAkBCC,SAlBD,gBAkBCA,SAlBD;AAAA,UAkBYG,QAlBZ,gBAkBYA,QAlBZ;AAAA,UAkBsBC,KAlBtB,gBAkBsBA,KAlBtB;AAAA,UAkBgCH,IAlBhC;AAoBP,aACE,oBAAC,iBAAD;AACE,QAAA,KAAK,EAAE,CACLI,MAAM,CAACC,SADF,EAELT,sBAASC,EAAT,KAAgB,KAAhB,GACI;AAAES,UAAAA,OAAO,EAAEP,SAAS,GAAG,MAAH,GAAY;AAAhC,SADJ,GAEI,IAJC,EAKLI,KALK,CADT;AAQE,QAAA,WAAW,EAAE,KARf;AASE,QAAA,qBAAqB,EAGnBP,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,CAACE,SAAzB,GAAqC,IAZzC;AAcE,QAAA,aAAa,EAAEA,SAAS,GAAG,MAAH,GAAY;AAdtC,SAeMC,IAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAiBE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAED,SAAS,GAAGK,MAAM,CAACG,QAAV,GAAqBH,MAAM,CAACI,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGN,QADH,CAjBF,CADF;AAuBD;;;EA5C8CO,KAAK,CAACC,S;;;;AA+CvD,IAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BP,EAAAA,QAAQ,EAAE;AACRM,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BL,EAAAA,QAAQ,EAAE;AACRK,IAAAA,IAAI,EAAE,CADE;AAERE,IAAAA,GAAG,EAAErB;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}