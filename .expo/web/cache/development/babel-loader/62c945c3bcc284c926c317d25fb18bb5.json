{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _Colors = _interopRequireDefault(require(\"../Themes/Colors\"));\n\nvar _DummyParse = require(\"../DummyData/DummyParse\");\n\nvar _Exercise = require(\"../Classes/Exercise\");\n\nvar _Dimensions = _interopRequireDefault(require(\"react-native-web/src/exports/Dimensions\"));\n\nvar _WorkoutCard = require(\"./Components/WorkoutCard.js\");\n\nvar _jsxFileName = \"D:\\\\Dell\\\\Documents\\\\SCHOOL SHIT\\\\FALL 2020\\\\Software Dev Project\\\\WorkoutApp\\\\Screens\\\\WorkoutScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar exerciseWithin = _DummyParse.dumDumRoutines[1].exercises;\n\nvar WorkoutScreen = function (_React$Component) {\n  (0, _inherits2.default)(WorkoutScreen, _React$Component);\n\n  var _super = _createSuper(WorkoutScreen);\n\n  function WorkoutScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, WorkoutScreen);\n    _this = _super.call(this, props);\n\n    _this.finish = function (id, name, inputData) {\n      var tempArray = _this.state.exercises;\n      var index = 0;\n\n      for (var i = 0; i < tempArray.length; i++) {\n        if (tempArray[i].exerciseID === id) index = i;\n      }\n\n      console.log(index);\n      tempArray.splice(index, 1);\n\n      _this.setState({\n        exercise: tempArray\n      });\n\n      console.log(_this.state.exercises);\n      if (_this.state.exercises.length === 0) _this.setState({\n        userDone: true\n      });\n    };\n\n    _this.state = {\n      exercises: [],\n      today: new Date().getFullYear() + '-' + new Date().getMonth() + '-' + new Date().getDay(),\n      userDone: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(WorkoutScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        exercises: this.fillArray()\n      });\n    }\n  }, {\n    key: \"fillArray\",\n    value: function fillArray() {\n      var tempExercise = [];\n\n      var _loop = function _loop(i) {\n        var tempExer = _DummyParse.dumDumExercise.find(function (temp) {\n          return temp.exerciseID === exerciseWithin[i].exerciseID;\n        });\n\n        console.log(tempExer.name);\n        tempExercise.push(tempExer);\n      };\n\n      for (var i = 0; i < exerciseWithin.length; i++) {\n        _loop(i);\n      }\n\n      return tempExercise;\n    }\n  }, {\n    key: \"getExerciseName\",\n    value: function getExerciseName(exerciseId) {\n      var db = SQLite.openDatabase(\"workoutAppDB.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"select name from exercises where Id = \" + exerciseId + \";\", [], function (_, rows) {\n          console.log(\"sqllog_WorkoutScreen_exercises_name\", rows.rows);\n          return rows.rows;\n        });\n      });\n    }\n  }, {\n    key: \"getExerciseInfo\",\n    value: function getExerciseInfo(routine_Id) {\n      var db = SQLite.openDatabase(\"workoutAppDB.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"select numberOFReps, numberofSets, weight, placeInOrder, from ExercisesWithinRoutines where routineID = \" + routine_Id + \";\", [], function (_, rows) {\n          console.log(\"sqllog_WorkoutScreen_exercises_info\", rows.rows);\n          return rows.rows;\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.workout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Modal, {\n        animationType: 'slide',\n        visible: this.state.userDone,\n        transparent: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.modalStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.modalText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, \"GREAT WORK!\"), _react.default.createElement(_reactNative.Image, {\n        source: require('../img/finish.png'),\n        style: {\n          width: 200,\n          height: 150,\n          margin: 50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_reactNative.Button, {\n        title: \"Return\",\n        color: _Colors.default.positive,\n        onPress: console.log(\"IVE BEEN CLICKED!\"),\n        style: {\n          alignSelf: 'center',\n          marginTop: 20,\n          marginBottom: 40\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 19\n        }\n      }, \"RETURN\"))))), _react.default.createElement(_reactNative.FlatList, {\n        style: {\n          flexDirection: 'row',\n          flex: 1\n        },\n        horizontal: true,\n        decelerationRate: 0,\n        snapToInterval: 400,\n        snapToAlignment: \"center\",\n        disableIntervalMomentum: true,\n        data: this.state.exercises,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _react.default.createElement(_WorkoutCard.WorkoutCard, {\n            id: item.exerciseID,\n            name: item.name,\n            isWeight: item.doesUseWeight,\n            finishFunction: _this2.finish,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }\n          });\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return item.exerciseID.toString();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return WorkoutScreen;\n}(_react.default.Component);\n\nvar styles = _reactNative.StyleSheet.create({\n  workout: {\n    backgroundColor: _Colors.default.background,\n    flex: 1,\n    alignItems: 'center'\n  },\n  modalStyle: {\n    alignSelf: 'center',\n    backgroundColor: _Colors.default.card,\n    alignItems: 'center',\n    marginTop: 100,\n    height: 400\n  },\n  buttonText: {\n    fontWeight: 'bold',\n    fontSize: 18,\n    color: _Colors.default.text,\n    alignSelf: 'center'\n  },\n  modalText: {\n    fontWeight: 'bold',\n    fontSize: 30,\n    marginTop: 40,\n    color: _Colors.default.text\n  },\n  card: {\n    marginTop: 150,\n    width: 370,\n    height: 550,\n    backgroundColor: _Colors.default.card,\n    borderWidth: 0,\n    alignSelf: 'center'\n  },\n  titleText: {\n    color: _Colors.default.text,\n    fontSize: 27,\n    alignSelf: 'center',\n    margin: 15\n  },\n  textField: {\n    alignSelf: 'center',\n    backgroundColor: _Colors.default.textFieldBackground,\n    color: _Colors.default.card,\n    height: 40,\n    width: 75,\n    marginTop: 5,\n    marginBottom: 5,\n    borderWidth: 2,\n    borderColor: _Colors.default.card\n  }\n});\n\nmodule.exports = WorkoutScreen;","map":{"version":3,"sources":["D:/Dell/Documents/SCHOOL SHIT/FALL 2020/Software Dev Project/WorkoutApp/Screens/WorkoutScreen.js"],"names":["exerciseWithin","dumDumRoutines","exercises","WorkoutScreen","props","finish","id","name","inputData","tempArray","state","index","i","length","exerciseID","console","log","splice","setState","exercise","userDone","today","Date","getFullYear","getMonth","getDay","fillArray","tempExercise","tempExer","dumDumExercise","find","temp","push","exerciseId","db","SQLite","openDatabase","transaction","tx","executeSql","_","rows","routine_Id","styles","workout","modalStyle","modalText","require","width","height","margin","Colors","positive","alignSelf","marginTop","marginBottom","buttonText","flexDirection","flex","item","doesUseWeight","toString","React","Component","StyleSheet","create","backgroundColor","background","alignItems","card","fontWeight","fontSize","color","text","borderWidth","titleText","textField","textFieldBackground","borderColor","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport React from 'react';\r\nimport {StyleSheet, TextInput, Text, View, Button, FlatList, Modal, Image} from 'react-native';\r\nimport {Card} from 'react-native-elements';\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport Colors from \"../Themes/Colors\";\r\nimport {dumDumExercise, dumDumRoutines} from \"../DummyData/DummyParse\";\r\nimport {Exercise} from \"../Classes/Exercise\";\r\nimport Dimensions from \"react-native-web/src/exports/Dimensions\";\r\nimport {WorkoutCard} from \"./Components/WorkoutCard.js\";\r\n\r\nlet exerciseWithin = dumDumRoutines[1].exercises; // Some temp bullshit\r\n\r\nclass WorkoutScreen extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      exercises: [],\r\n      today: new Date().getFullYear() + '-' + new Date().getMonth() + '-' + new Date().getDay(),\r\n      userDone: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      exercises: this.fillArray(),\r\n    })\r\n  }\r\n\r\n  // Fills the exercise array with exercise objects current just pulling form json object\r\n  fillArray() {\r\n    let tempExercise = [];\r\n    for (let i = 0; i < exerciseWithin.length; i++) {\r\n      let tempExer = dumDumExercise.find(temp => temp.exerciseID === exerciseWithin[i].exerciseID);\r\n      console.log(tempExer.name);\r\n      tempExercise.push(tempExer);\r\n    }\r\n    return tempExercise;\r\n  }\r\n\r\n  getExerciseName(exerciseId) {\r\n    const db = SQLite.openDatabase(\"workoutAppDB.db\");\r\n\r\n    db.transaction(tx => {\r\n      tx.executeSql(\"select name from exercises where Id = \" + exerciseId + \";\", [], (_, rows) => {\r\n\r\n        console.log(\"sqllog_WorkoutScreen_exercises_name\", rows.rows)\r\n\r\n        return rows.rows;\r\n      })\r\n    })\r\n  }\r\n\r\n  getExerciseInfo(routine_Id) {\r\n    const db = SQLite.openDatabase(\"workoutAppDB.db\");\r\n\r\n    db.transaction(tx => {\r\n      tx.executeSql(\"select numberOFReps, numberofSets, weight, placeInOrder, from ExercisesWithinRoutines where routineID = \" + routine_Id + \";\", [], (_, rows) => {\r\n\r\n        console.log(\"sqllog_WorkoutScreen_exercises_info\", rows.rows)\r\n\r\n        return rows.rows;\r\n      })\r\n    })\r\n  }\r\n\r\n  // Takes finished exercise id, name, and input data, removes the the exercise from the array\r\n  finish = (id, name, inputData) => {\r\n    /*\r\n    state = {\r\n        id: '',\r\n        name: '',\r\n        isWeighted: false,\r\n        isDone: false,\r\n        textInput: [],\r\n        inputData: [],\r\n        count: 1\r\n    }\r\n     */\r\n    let tempArray = this.state.exercises;\r\n    let index = 0;\r\n\r\n    for(let i = 0; i < tempArray.length; i++){\r\n      if(tempArray[i].exerciseID === id)\r\n        index = i;\r\n    }\r\n\r\n    console.log(index);\r\n    tempArray.splice(index, 1);\r\n    this.setState({\r\n      exercise: tempArray});\r\n\r\n    console.log(this.state.exercises);\r\n    if(this.state.exercises.length === 0)\r\n      this.setState({userDone: true})\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <View style={styles.workout}>\r\n          <View>\r\n            <Modal\r\n              animationType={'slide'}\r\n              visible={this.state.userDone}\r\n              transparent={true}\r\n              >\r\n              <View style = {styles.modalStyle}>\r\n                <Text style={styles.modalText}>GREAT WORK!</Text>\r\n                <Image source={require('../img/finish.png')}\r\n                  style={{\r\n                    width: 200,\r\n                    height: 150,\r\n                    margin: 50,\r\n                  }}/>\r\n                <Button\r\n                  title=\"Return\"\r\n                  color={Colors.positive}\r\n                  onPress={console.log(\"IVE BEEN CLICKED!\")}\r\n                  style={{\r\n                    alignSelf: 'center',\r\n                    marginTop: 20,\r\n                    marginBottom: 40,\r\n                  }}>\r\n                  <Text style={styles.buttonText}>RETURN</Text>\r\n                </Button>\r\n              </View>\r\n            </Modal>\r\n          </View>\r\n          <FlatList\r\n              style={{\r\n                flexDirection: 'row',\r\n                flex: 1,\r\n              }}\r\n              horizontal\r\n              decelerationRate={0}\r\n              snapToInterval={400}\r\n              snapToAlignment={\"center\"}\r\n              disableIntervalMomentum={ true }\r\n              data={this.state.exercises} renderItem={({item}) => (\r\n              <WorkoutCard\r\n                  id={item.exerciseID}\r\n                  name={item.name}\r\n                  isWeight={item.doesUseWeight}\r\n                  finishFunction={this.finish}\r\n              />\r\n\r\n          )} keyExtractor={(item, index) => item.exerciseID.toString()}/>\r\n\r\n        </View>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  workout: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n    alignItems: 'center',\r\n  },\r\n  modalStyle: {\r\n    alignSelf: 'center',\r\n    backgroundColor: Colors.card,\r\n    alignItems: 'center',\r\n    marginTop: 100,\r\n    height: 400,\r\n  },\r\n  buttonText: {\r\n    fontWeight: 'bold',\r\n    fontSize: 18,\r\n    color: Colors.text,\r\n    alignSelf: 'center'\r\n  },\r\n  modalText: {\r\n    fontWeight: 'bold',\r\n    fontSize: 30,\r\n    marginTop: 40,\r\n    color: Colors.text,\r\n  },\r\n  card: {\r\n    marginTop: 150,\r\n    width: 370,\r\n    height: 550,\r\n    backgroundColor: Colors.card,\r\n    borderWidth: 0,\r\n    alignSelf: 'center',\r\n  },\r\n  titleText: {\r\n    color: Colors.text,\r\n    fontSize: 27,\r\n    alignSelf: 'center',\r\n    margin: 15,\r\n  },\r\n  textField: {\r\n    alignSelf: 'center',\r\n    backgroundColor: Colors.textFieldBackground,\r\n    color: Colors.card,\r\n    height: 40,\r\n    width: 75,\r\n    marginTop: 5,\r\n    marginBottom: 5,\r\n    borderWidth: 2,\r\n    borderColor: Colors.card,\r\n  },\r\n});\r\n\r\nmodule.exports = WorkoutScreen;\r\n"]},"metadata":{},"sourceType":"script"}