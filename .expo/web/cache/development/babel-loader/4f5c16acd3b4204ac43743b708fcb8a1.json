{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _Colors = _interopRequireDefault(require(\"../Themes/Colors\"));\n\nvar _reactNativeElements = require(\"react-native-elements\");\n\nvar _Styles = require(\"../Themes/Styles\");\n\nvar _Routine = require(\"../Classes/Routine\");\n\nvar navigation = _interopRequireWildcard(require(\"react-navigation\"));\n\nvar _ViewAndEditSingleRoutine = _interopRequireDefault(require(\"./ViewAndEditSingleRoutine\"));\n\nvar _createNativeStackNavigator = _interopRequireDefault(require(\"react-native-screens/src/native-stack/navigators/createNativeStackNavigator\"));\n\nvar _jsxFileName = \"D:\\\\school\\\\softdev projects\\\\WorkoutApp\\\\Screens\\\\ChooseAndViewAllRoutinesScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ChooseAndViewAllRoutinesScreen = function (_React$Component) {\n  (0, _inherits2.default)(ChooseAndViewAllRoutinesScreen, _React$Component);\n\n  var _super = _createSuper(ChooseAndViewAllRoutinesScreen);\n\n  function ChooseAndViewAllRoutinesScreen() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ChooseAndViewAllRoutinesScreen);\n    _this = _super.call(this);\n    _this.state = {\n      routineList: []\n    };\n    console.log(\"test\");\n    return _this;\n  }\n\n  (0, _createClass2.default)(ChooseAndViewAllRoutinesScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(\"test\");\n      (0, _Routine.getAllRoutinesWithOutExercises)(function (result) {\n        _this2.setState({\n          routineList: result\n        }, function () {\n          console.log(this.state.routineList);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return _react.default.createElement(_reactNative.View, {\n        style: _Styles.listStyle.screen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _Styles.listStyle.titleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, \"Saved Routines\"), _react.default.createElement(_reactNative.FlatList, {\n        data: this.state.routineList,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _react.default.createElement(_reactNative.TouchableOpacity, {\n            onPress: function onPress() {\n              return _this3.props.navigation.navigate('StatsScreen', {\n                routineID: item.id\n              });\n            },\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }\n          }, _react.default.createElement(_reactNativeElements.Card, {\n            containerStyle: styles.card,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 23\n            }\n          }, _react.default.createElement(_reactNative.Text, {\n            style: styles.text,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 25\n            }\n          }, item.name)));\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return ChooseAndViewAllRoutinesScreen;\n}(_react.default.Component);\n\nexports.default = ChooseAndViewAllRoutinesScreen;\n\nvar styles = _reactNative.StyleSheet.create({\n  card: {\n    marginTop: 25,\n    marginBottom: 25,\n    backgroundColor: _Colors.default.card,\n    borderWidth: 0,\n    alignSelf: 'center',\n    width: 370,\n    height: 75\n  },\n  text: {\n    color: _Colors.default.text,\n    fontSize: 20,\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Screens/ChooseAndViewAllRoutinesScreen.js"],"names":["ChooseAndViewAllRoutinesScreen","state","routineList","console","log","result","setState","listStyle","screen","titleText","item","props","navigation","navigate","routineID","id","styles","card","text","name","React","Component","StyleSheet","create","marginTop","marginBottom","backgroundColor","Colors","borderWidth","alignSelf","width","height","color","fontSize"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEqBA,8B;;;;;AAKnB,4CAAc;AAAA;;AAAA;AACZ;AADY,UAJdC,KAIc,GAJN;AACNC,MAAAA,WAAW,EAAE;AADP,KAIM;AAEVC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAFU;AAGb;;;;wCAImB;AAAA;;AAChBD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,mDAA+B,UAACC,MAAD,EAAU;AACrC,QAAA,MAAI,CAACC,QAAL,CAAc;AACVJ,UAAAA,WAAW,EAAEG;AADH,SAAd,EAEE,YAAU;AACRF,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWC,WAAvB;AACH,SAJD;AAKH,OAND;AAOH;;;6BAEQ;AAAA;;AACL,aACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEK,kBAAUC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAED,kBAAUE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEE,6BAAC,qBAAD;AACI,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWC,WADrB;AAEI,QAAA,UAAU,EAAE;AAAA,cAAEQ,IAAF,QAAEA,IAAF;AAAA,iBACR,6BAAC,6BAAD;AAAkB,YAAA,OAAO,EAAG;AAAA,qBAAO,MAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,aAA/B,EAA6C;AAC5EC,gBAAAA,SAAS,EAAEJ,IAAI,CAACK;AAD4D,eAA7C,CAAP;AAAA,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGI,6BAAC,yBAAD;AAAM,YAAA,cAAc,EAAEC,MAAM,CAACC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,6BAAC,iBAAD;AAAM,YAAA,KAAK,EAAED,MAAM,CAACE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA2BR,IAAI,CAACS,IAAhC,CADF,CAHJ,CADQ;AAAA,SAFhB;AAWI,QAAA,YAAY,EAAE,sBAAAT,IAAI;AAAA,iBAAIA,IAAI,CAACK,EAAT;AAAA,SAXtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAkBH;;;EA1CyDK,eAAMC,S;;;;AA6ClE,IAAML,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC7BN,EAAAA,IAAI,EAAE;AACFO,IAAAA,SAAS,EAAE,EADT;AAEFC,IAAAA,YAAY,EAAE,EAFZ;AAGFC,IAAAA,eAAe,EAAEC,gBAAOV,IAHtB;AAIFW,IAAAA,WAAW,EAAE,CAJX;AAKFC,IAAAA,SAAS,EAAE,QALT;AAMFC,IAAAA,KAAK,EAAE,GANL;AAOFC,IAAAA,MAAM,EAAE;AAPN,GADuB;AAU7Bb,EAAAA,IAAI,EAAE;AACFc,IAAAA,KAAK,EAAEL,gBAAOT,IADZ;AAEFe,IAAAA,QAAQ,EAAE,EAFR;AAGFT,IAAAA,SAAS,EAAE;AAHT;AAVuB,CAAlB,CAAf","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport React, {Component} from 'react';\r\nimport {StyleSheet, Text, View, FlatList, TouchableOpacity} from 'react-native';\r\nimport * as SQLite from 'expo-sqlite';\r\nimport Colors from '../Themes/Colors';\r\nimport {Card} from 'react-native-elements';\r\nimport {listStyle} from '../Themes/Styles';\r\nimport {getAllRoutinesWithOutExercises} from \"../Classes/Routine\";\r\nimport * as navigation from \"react-navigation\";\r\nimport ViewAndEditSingleRoutine from \"./ViewAndEditSingleRoutine\";\r\nimport NativeStackNavigator from \"react-native-screens/src/native-stack/navigators/createNativeStackNavigator\";\r\n\r\nexport default class ChooseAndViewAllRoutinesScreen extends React.Component {\r\n  state = {\r\n    routineList: [],\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n      console.log(\"test\")\r\n  }\r\n\r\n  //method returns a list of routines\r\n  //has not been tested\r\n  componentDidMount() {\r\n      console.log(\"test\")\r\n      getAllRoutinesWithOutExercises((result)=>{\r\n          this.setState({\r\n              routineList: result\r\n          },function(){\r\n              console.log(this.state.routineList)\r\n          })\r\n      });\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <View style={listStyle.screen}>\r\n            <Text style={listStyle.titleText}>Saved Routines</Text>\r\n          <FlatList\r\n              data={this.state.routineList}\r\n              renderItem={({item}) => (\r\n                  <TouchableOpacity onPress= {() =>  this.props.navigation.navigate('StatsScreen',{\r\n                      routineID: item.id\r\n                  })}>\r\n                      <Card containerStyle={styles.card}>\r\n                        <Text style={styles.text}>{item.name}</Text>\r\n                      </Card>\r\n                  </TouchableOpacity>\r\n              )}\r\n              keyExtractor={item => item.id}\r\n          />\r\n        </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    card: {\r\n        marginTop: 25,\r\n        marginBottom: 25,\r\n        backgroundColor: Colors.card,\r\n        borderWidth: 0,\r\n        alignSelf: 'center',\r\n        width: 370,\r\n        height: 75,\r\n    },\r\n    text: {\r\n        color: Colors.text,\r\n        fontSize: 20,\r\n        marginTop: 10,\r\n    }\r\n\r\n})\r\n"]},"metadata":{},"sourceType":"script"}