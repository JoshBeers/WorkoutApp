{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNewRoutine = addNewRoutine;\nexports.getSpecificRoutine = getSpecificRoutine;\nexports.getAllRoutinesWithOutExercises = getAllRoutinesWithOutExercises;\nexports.updateRoutine = updateRoutine;\nexports.deleteRoutine = deleteRoutine;\nexports.Routine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _Exercise = require(\"./Exercise\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar _reactNativeReanimated = require(\"react-native-reanimated\");\n\nvar Routine = function Routine(id, name, placeInOrder, exercises) {\n  (0, _classCallCheck2.default)(this, Routine);\n  this.id = id;\n  this.name = name;\n  this.placeInOrder = placeInOrder;\n  this.exercises = exercises;\n};\n\nexports.Routine = Routine;\n\nfunction addNewRoutine(routine, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into routines(name,placeOnList) values('\" + routine.name + \"',\" + routine.placeInOrder + \");\", [], function () {\n      _App.db.transaction(function (tx) {\n        tx.executeSql(\"select Max(ID) as ID from routines;\", [], function (_, rows) {\n          (0, _Exercise.addMultipleExercisesToRoutine)(rows.rows.item(0).ID, routine.exercises, callback);\n        });\n      });\n    });\n  });\n}\n\nfunction getSpecificRoutine(routineID, callback) {\n  console.log(\"start get specific routine\");\n  var tempRoutine = new Routine();\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines where ID =\" + routineID + \";\", [], function (_, rows) {\n      console.log(\"get specific routine routine got  \", rows.rows.item(0));\n      tempRoutine.id = rows.rows[0].ID;\n      tempRoutine.name = rows.rows[0].name;\n      tempRoutine.placeInOrder = rows.rows[0].placeOnList;\n      (0, _Exercise.getExerciseFromRoutine)(routineID, function (res) {\n        tempRoutine.exercises = res;\n\n        if (callback != null) {\n          callback(tempRoutine);\n        }\n      });\n    });\n  });\n}\n\nfunction getAllRoutinesWithOutExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines;\", [], function (_, rows) {\n      var tempRoutines = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempRoutines.push(new Routine(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).placeOnList, []));\n      }\n\n      if (callback != null) {\n        callback(tempRoutines);\n      }\n    });\n  });\n}\n\nfunction updateRoutine(routine, callback) {\n  (0, _Exercise.deleteExercisesUnderARoutine)(routine.id, function () {\n    console.log(\"sqllog_method_updateRoutine\", routine.name);\n\n    _App.db.transaction(function (tx) {\n      tx.executeSql(\"update routines set name = '\" + routine.name + \"',placeOnList = \" + routine.placeInOrder + \" where ID = \" + routine.id + \";\", [], function (_, rows) {\n        (0, _Exercise.addMultipleExercisesToRoutine)(routine.id, routine.exercises, function () {\n          if (callback != null) {\n            callback();\n          }\n        });\n      });\n    });\n  });\n}\n\nfunction deleteRoutine(routine, callback) {\n  (0, _Exercise.deleteExercisesUnderARoutine)(routine.id, function () {\n    _App.db.transaction(function (tx) {\n      tx.executeSql(\"delete from routines where ID = \" + routine.id + \";\", [], function (_, rows) {\n        if (callback != null) {\n          callback();\n        }\n      });\n    });\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Routine.js"],"names":["Routine","id","name","placeInOrder","exercises","addNewRoutine","routine","callback","db","transaction","tx","executeSql","_","rows","item","ID","getSpecificRoutine","routineID","console","log","tempRoutine","placeOnList","res","getAllRoutinesWithOutExercises","tempRoutines","i","length","push","updateRoutine","deleteRoutine"],"mappings":"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","sourcesContent":["import {\r\n    addMultipleExercisesToRoutine, deleteExercisesUnderARoutine,\r\n    ExerciseWithinRoutine,\r\n    getExerciseFromRoutine\r\n} from \"./Exercise\";\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\nimport {call} from \"react-native-reanimated\";\r\n\r\n\r\nexport class Routine{\r\n    constructor(id, name,placeInOrder,exercises:ExerciseWithinRoutine[]) {\r\n        this.id = id\r\n        this.name= name\r\n        this.placeInOrder =placeInOrder\r\n        this.exercises = exercises\r\n    }\r\n}\r\n\r\nexport function addNewRoutine(routine:Routine,callback){\r\n    //adds routine\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into routines(name,placeOnList) values('\"+routine.name+\"',\"+routine.placeInOrder+\");\",[],function(){\r\n\r\n            db.transaction(tx =>{\r\n                tx.executeSql(\"select Max(ID) as ID from routines;\",[],(_,rows)=>{\r\n                    //console.log(\"sqllog_method_addNewRoutiney\",rows.rows.item(0))\r\n                    addMultipleExercisesToRoutine(rows.rows.item(0).ID,routine.exercises, callback)\r\n                })\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n\r\nexport function getSpecificRoutine(routineID,callback){\r\n    console.log(\"start get specific routine\")\r\n    let tempRoutine = new Routine()\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines where ID =\"+ routineID +\";\",[],(_,rows) =>{\r\n            console.log(\"get specific routine routine got  \", rows.rows.item(0))\r\n            tempRoutine.id = rows.rows[0].ID\r\n            tempRoutine.name = rows.rows[0].name\r\n            tempRoutine.placeInOrder = rows.rows[0].placeOnList\r\n            getExerciseFromRoutine(routineID,function (res) {\r\n                tempRoutine.exercises = res\r\n                if(callback != null){\r\n                    callback(tempRoutine)\r\n                }\r\n            })\r\n\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function getAllRoutinesWithOutExercises(callback){\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines;\",[],(_,rows) =>{\r\n            let tempRoutines = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n               // console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempRoutines.push(new Routine(rows.rows.item(i).ID,rows.rows.item(i).name,rows.rows.item(i).placeOnList, []))\r\n            }\r\n           // tempRoutines.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempRoutines)\r\n            }\r\n\r\n        })\r\n    })\r\n}\r\n\r\n//s routines(ID integer primary key AUTOINCREMENT, name varchar(30) not null,placeOnList integer);\r\nexport function updateRoutine(routine:Routine, callback){\r\n    deleteExercisesUnderARoutine(routine.id, function (){\r\n        console.log(\"sqllog_method_updateRoutine\",routine.name)\r\n        db.transaction(tx =>{\r\n            tx.executeSql(\"update routines set name = '\"+routine.name+\"',placeOnList = \"+routine.placeInOrder+\" where ID = \"+routine.id+\";\",[],(_,rows) =>{\r\n                addMultipleExercisesToRoutine(routine.id,routine.exercises,function () {\r\n                    if(callback != null){\r\n                        callback()\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n\r\n    })\r\n}\r\n\r\nexport function deleteRoutine(routine:Routine, callback){\r\n    deleteExercisesUnderARoutine(routine.id, function (){\r\n        db.transaction(tx => {\r\n            tx.executeSql(\"delete from routines where ID = \"+routine.id+\";\", [], (_,rows) =>{\r\n                //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n                if (callback != null) {\r\n                    callback()\r\n                }\r\n            })\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}