{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useWindowDimensions;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n          height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: _reactNative.Dimensions.get('window')\n    });\n\n    _reactNative.Dimensions.addEventListener('change', onChange);\n\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["C:/Users/arack/OneDrive/Desktop/WorkoutApp/node_modules/@react-navigation/bottom-tabs/src/utils/useWindowDimensions.tsx"],"names":["useWindowDimensions","React","useState","Dimensions","get","height","width","dimensions","setDimensions","useEffect","onChange","window","d","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAIe,SAASA,mBAAT,GAA+B;AAAA,wBACRC,KAAK,CAACC,QAAN,CAAe,YAAM;AAAA,0BAErBC,wBAAWC,GAAX,CAAe,QAAf,CAFqB;AAAA,gDAE/CC,MAF+C;AAAA,QAE/CA,MAF+C,sCAEtC,CAFsC;AAAA,gDAEnCC,KAFmC;AAAA,QAEnCA,KAFmC,sCAE3B,CAF2B;;AAIvD,WAAO;AAAED,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,KAAK,EAALA;AAAV,KAAP;AACD,GALmC,CADQ;AAAA;AAAA,MACrCC,UADqC;AAAA,MACzBC,aADyB;;AAQ5CP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,YAAM;AACpB,QAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAwC;AAAA,UAArCC,MAAqC,QAArCA,MAAqC;AAAA,UAC/CL,KAD+C,GAC7BK,MAD6B,CAC/CL,KAD+C;AAAA,UACxCD,MADwC,GAC7BM,MAD6B,CACxCN,MADwC;AAGvDG,MAAAA,aAAa,CAAC,UAACI,CAAD,EAAO;AACnB,YAAIN,KAAK,KAAKM,CAAC,CAACN,KAAZ,IAAqBD,MAAM,KAAKO,CAAC,CAACP,MAAtC,EAA8C;AAC5C,iBAAOO,CAAP;AACD;;AAED,eAAO;AAAEN,UAAAA,KAAK,EAALA,KAAF;AAASD,UAAAA,MAAM,EAANA;AAAT,SAAP;AACD,OANY,CAAb;AAOD,KAVD;;AAcAK,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAER,wBAAWC,GAAX,CAAe,QAAf;AAAV,KAAD,CAAR;;AAEAD,4BAAWU,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC;;AAEA,WAAO;AAAA,aAAMP,wBAAWW,mBAAX,CAA+B,QAA/B,EAAyCJ,QAAzC,CAAN;AAAA,KAAP;AACD,GApBD,EAoBG,EApBH;AAsBA,SAAOH,UAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}