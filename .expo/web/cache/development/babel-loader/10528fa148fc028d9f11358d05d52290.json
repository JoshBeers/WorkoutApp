{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addExerciseToRoutine = addExerciseToRoutine;\nexports.addMultipleExercisesToRoutine = addMultipleExercisesToRoutine;\nexports.deleteExerciseFromRoutine = deleteExerciseFromRoutine;\nexports.getExerciseFromRoutine = getExerciseFromRoutine;\nexports.getAllExercisesWithinRoutines = getAllExercisesWithinRoutines;\nexports.updateExerciseFromExercise = updateExerciseFromExercise;\nexports.createNewExerciseFromExercise = createNewExerciseFromExercise;\nexports.getAllExercises = getAllExercises;\nexports.deleteExerciseById = deleteExerciseById;\nexports.getAllCompleteExerciseBySpecificExerciseID = getAllCompleteExerciseBySpecificExerciseID;\nexports.saveExerciseFromCompletedExercises = saveExerciseFromCompletedExercises;\nexports.CompleteExercise = exports.Exercise = exports.ExerciseWithinRoutine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar _Workout = require(\"./Workout\");\n\nvar ExerciseWithinRoutine = function ExerciseWithinRoutine(ID, exerciseID, routineId, placeInOrder) {\n  (0, _classCallCheck2.default)(this, ExerciseWithinRoutine);\n  this.ID = ID;\n  this.exerciseID = exerciseID;\n  this.routineId = routineId;\n  this.placeInOrder = placeInOrder;\n};\n\nexports.ExerciseWithinRoutine = ExerciseWithinRoutine;\n\nfunction addExerciseToRoutine(routineID, exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\", [exercise.exerciseID, routineID, exercise.placeInOrder], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction addMultipleExercisesToRoutine(routineID, exercises, callback) {\n  for (var i = 0; i < exercises.length; i++) {\n    if (i == exercises.length - 1) {\n      addExerciseToRoutine(routineID, exercises[i], function () {\n        callback();\n      });\n    } else {\n      addExerciseToRoutine(routineID, exercises[i]);\n    }\n  }\n}\n\nfunction deleteExerciseFromRoutine(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\", [exercise.ID], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getExerciseFromRoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\" + routineID + \";\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(1).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getAllExercisesWithinRoutines(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID, rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nvar Exercise = function Exercise(exerciseID, name, description, doesUseWeight) {\n  (0, _classCallCheck2.default)(this, Exercise);\n  this.exerciseID = exerciseID;\n  this.name = name;\n  this.description = description;\n  this.doesUseWeight = doesUseWeight;\n};\n\nexports.Exercise = Exercise;\n\nfunction updateExerciseFromExercise(exercise) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"update Exercises set \" + \"name = '\" + exercise.name + \"',\" + \"description = '\" + exercise.description + \"', \" + \"doseUseWeight = '\" + exercise.doesUseWeight + \"'\" + \"where ID = \" + exercise.exerciseID + \";\");\n  });\n}\n\nfunction createNewExerciseFromExercise(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(name,description,doesUseWeight) values('\" + exercise.name + \"','\" + exercise.description + \"',\" + exercise.doesUseWeight + \");\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nfunction getAllExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction deleteExerciseById(id, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"delete from Exercises where ID = \" + id + \";\", [], function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nvar CompleteExercise = function CompleteExercise(ID, exerciseId, workoutID, numberOfReps, numberOfSets, averageWeight, date) {\n  (0, _classCallCheck2.default)(this, CompleteExercise);\n  this.ID = ID;\n  this.exerciseId = exerciseId;\n  this.workoutID = workoutID;\n  this.numberOfReps = numberOfReps;\n  this.numberOfSets = numberOfSets;\n  this.averageWeight = averageWeight;\n  this.date = date;\n};\n\nexports.CompleteExercise = CompleteExercise;\n\nfunction getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback) {\n  (0, _Workout.getMapOfCompleteWorkoutIDsToDates)(function (result) {\n    var map = result;\n    getCompleteExercisesForSpecificExerciseID(exerciseID, function (result) {\n      var tempExercises = result;\n\n      for (var i = 0; i < result.length; i++) {\n        tempExercises[i].date = map.get(result[i].workoutID);\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null));\n      }\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction saveExerciseFromCompletedExercises(exercise) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,workOutID) values(\" + exercise.ID + \",\" + exercise.numberOfReps + \",\" + exercise.numberOfSets + \",\" + exercise.weight + \",\" + exercise.workoutId + \");\", function (_, rows) {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Exercise.js"],"names":["ExerciseWithinRoutine","ID","exerciseID","routineId","placeInOrder","addExerciseToRoutine","routineID","exercise","callback","db","transaction","tx","executeSql","_","rows","addMultipleExercisesToRoutine","exercises","i","length","deleteExerciseFromRoutine","getExerciseFromRoutine","tempExercises","push","item","getAllExercisesWithinRoutines","sort","a","b","Exercise","name","description","doesUseWeight","updateExerciseFromExercise","createNewExerciseFromExercise","getAllExercises","deleteExerciseById","id","CompleteExercise","exerciseId","workoutID","numberOfReps","numberOfSets","averageWeight","date","getAllCompleteExerciseBySpecificExerciseID","result","map","getCompleteExercisesForSpecificExerciseID","get","workOutID","saveExerciseFromCompletedExercises","weight","workoutId"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\nimport { getMapOfCompleteWorkoutIDsToDates} from \"./Workout\";\r\n\r\n\r\n/*\r\nstuff for exerciuses that are wiuthin a routine\r\n\r\n */\r\nexport class ExerciseWithinRoutine{\r\n    constructor(ID,exerciseID, routineId, placeInOrder) {\r\n        this.ID = ID\r\n        this.exerciseID = exerciseID\r\n        this.routineId = routineId\r\n        this.placeInOrder = placeInOrder\r\n    }\r\n}\r\n\r\n//tested\r\nexport function addExerciseToRoutine(routineID,exercise, callback){\r\n    //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n        db.transaction(tx => {\r\n\r\n            //insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\r\n            tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(?,?,?);\",[exercise.exerciseID,routineID,exercise.placeInOrder],(_,rows) =>{\r\n               // console.log(\"sqllog_method_addExerciseToRoutine\")\r\n                if (callback != null) {\r\n                    callback()\r\n                }\r\n            })\r\n\r\n\r\n        })\r\n}\r\n\r\n\r\nexport function addMultipleExercisesToRoutine(routineID,exercises, callback){\r\n\r\n    for(let i = 0; i<exercises.length ; i++){\r\n        if(i == exercises.length-1){\r\n            addExerciseToRoutine(routineID, exercises[i], function (){\r\n                callback()\r\n            })\r\n        }else{\r\n            addExerciseToRoutine(routineID, exercises[i])\r\n        }\r\n        //console.log(\"sqllog_method_addExercisesToRoutine\",i)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//tested\r\n/*\r\n\r\n */\r\nexport function deleteExerciseFromRoutine(exercise:ExerciseWithinRoutine, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where ID = ? ;\",[exercise.ID], (_,rows) =>{\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n//tested\r\nexport function getExerciseFromRoutine(routineID, callback){\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\"+ routineID +\";\",[],(_,rows) => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(1).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\r\n            }\r\n           // tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function getAllExercisesWithinRoutines(callback){\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines;\",[],(_,rows) => {\r\n             //console.log(\"sqllog_method_getAllExercisesWithinRoutines_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).ID,rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\r\n            }\r\n            tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nstuff for exercises that are bases to be added to routines\r\n\r\n */\r\n\r\n\r\n\r\nexport class Exercise{\r\n\r\n    constructor(exerciseID:number , name: string, description:string, doesUseWeight:boolean) {\r\n        this.exerciseID = exerciseID\r\n        this.name = name\r\n        this.description = description\r\n        this.doesUseWeight = doesUseWeight\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function updateExerciseFromExercise(exercise:Exercise){\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update Exercises set \" +\r\n            \"name = '\" + exercise.name + \"',\" +\r\n            \"description = '\" + exercise.description +\"', \" +\r\n            \"doseUseWeight = '\" + exercise.doesUseWeight +\"'\" +\r\n            \"where ID = \" + exercise.exerciseID + \";\",)\r\n    })\r\n}\r\n\r\n//tested\r\nexport function createNewExerciseFromExercise(exercise: Exercise, callback){\r\n    //'Create table if not exists Exercises(ID integer primary key DESC, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"insert into Exercises(name,description,doesUseWeight) values('\" +\r\n            exercise.name + \"','\" +\r\n            exercise.description + \"',\" +\r\n            exercise.doesUseWeight +\r\n            \");\",[],(_,rows) =>{\r\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n//tested\r\nexport function getAllExercises(callback) {\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from Exercises;\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight))\r\n            }\r\n            tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\n//tested\r\nexport function deleteExerciseById(id, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"delete from Exercises where ID = \"+id+\";\", [], (_,rows) =>{\r\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n/*\r\nall of this can be done eaiser by one method\r\nexport function updateExerciseName(exerciseName, exerciseID) {\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update Exercises set name = \" + exerciseName + \" where ID = \" + exerciseID + \";\",)\r\n        })\r\n}\r\n\r\nexport function updateExcerciseInfo(routineID, numberOfReps, numberOfSets, weight, placeInOrder) {\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update ExercisesWithinRoutines set numberOFRep = \" + numberOfReps + \", numberOfSets = \" + numberOfSets + \", weight = \" + weight + \", placeInOrder = \" + placeInOrder + \" where routineID = \" + routineID + \";\",)\r\n        })\r\n}\r\n */\r\n\r\n\r\n/*\r\ncompleted exercise stuff\r\n\r\ncreate table if not exists CompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,averageWeight integer, workOutID int not null,FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(workOutID) REFERENCES Workouts(ID));',\r\n */\r\nexport class CompleteExercise{\r\n    constructor(ID: number, exerciseId: number,workoutID:number, numberOfReps:number , numberOfSets:number, averageWeight, date) {\r\n        this.ID =ID\r\n        this.exerciseId = exerciseId\r\n        this.workoutID = workoutID\r\n        this.numberOfReps = numberOfReps\r\n        this.numberOfSets = numberOfSets\r\n        this.averageWeight = averageWeight\r\n        this.date = date\r\n    }\r\n\r\n}\r\n\r\nexport function getAllCompleteExerciseBySpecificExerciseID(exerciseID, callback){\r\n    getMapOfCompleteWorkoutIDsToDates(function (result){\r\n        let map = result\r\n\r\n        getCompleteExercisesForSpecificExerciseID(exerciseID, function (result){\r\n            let tempExercises = result\r\n\r\n            for(let i = 0 ; i< result.length; i++){\r\n                tempExercises[i].date = map.get(result[i].workoutID)\r\n            }\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction getCompleteExercisesForSpecificExerciseID(exerciseID,callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedExercises where exerciseId = ?;\", [exerciseID], (_, rows) => {\r\n            //console.log(\"sqllog_method_getCompleteExercisesForSpecificExerciseID_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new CompleteExercise(rows.rows.item(i).ID, rows.rows.item(i).exerciseId, rows.rows.item(i).workOutID, rows.rows.item(i).numberOfReps, rows.rows.item(i).numberOfSets, rows.rows.item(i).averageWeight, null))\r\n            }\r\n\r\n\r\n            //tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function saveExerciseFromCompletedExercises(exercise:CompleteExercise) {\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,workOutID) values(\" +\r\n        exercise.ID + \",\" +\r\n        exercise.numberOfReps + \",\" +\r\n        exercise.numberOfSets + \",\" +\r\n        exercise.weight + \",\" +\r\n        exercise.workoutId +\r\n        \");\",(_,rows) =>{\r\n            //console.log(\"sqllog_method_addExerciseToRoutine\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}