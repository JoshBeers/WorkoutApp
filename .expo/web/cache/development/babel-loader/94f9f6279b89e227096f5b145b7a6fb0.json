{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTables = createTables;\nexports.createDummyData = createDummyData;\nexports.createWorkoutDummyData = createWorkoutDummyData;\nexports.creatCompletedExercisesDData = creatCompletedExercisesDData;\nexports.createExercisesDD = createExercisesDD;\nexports.createRoutinesDD = createRoutinesDD;\nexports.createExercisesWithinRoutineDD = createExercisesWithinRoutineDD;\nexports.clearDB = clearDB;\nexports.logDataBase = logDataBase;\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"./App\");\n\nfunction createTables(callback) {\n  _App.db.transaction(function (tx) {\n    try {\n      tx.executeSql('CREATE table if not exists Workouts(ID INTEGER PRIMARY KEY AUTOINCREMENT, date date not null);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('Create table if not exists Exercises(ID integer primary key AUTOINCREMENT, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists CompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,weight integer, workOutID int not null,FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(workOutID) REFERENCES Workouts(ID));');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists routines(ID integer primary key AUTOINCREMENT, name varchar(30) not null,placeOnList integer);');\n    } catch (error) {}\n\n    try {\n      tx.executeSql('create table if not exists ExercisesWithinRoutines(exerciseID int not null, routineID int not null, placeInOrder int not null, FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(routineID) REFERENCES WorkoutRoutines(ID), Primary key(exerciseId,routineID));');\n    } catch (error) {}\n\n    callback();\n  });\n}\n\nfunction createDummyData(callback) {\n  console.log(\"sqllog\", \"createDD\");\n  clearDB(function () {\n    createWorkoutDummyData(function () {\n      createExercisesDD(function () {\n        creatCompletedExercisesDData(function () {\n          createRoutinesDD(function () {\n            createExercisesWithinRoutineDD(function () {\n              callback();\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction createWorkoutDummyData(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into workouts(id,date) values(1,'2020-10-20');\");\n  });\n\n  console.log(\"sqllog\", \"workouts created\");\n  callback();\n}\n\nfunction creatCompletedExercisesDData(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(1,1,5,3,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID,weight) values(2,2,6,2,1, 5);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(3,3,5,6,1);\");\n  });\n\n  console.log(\"sqllog\", \"completed exercises created\");\n  callback();\n}\n\nfunction createExercisesDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(1,'push up','it is a push up',false);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(2,'dead lift','is a deadlift',true);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(ID,name,doesUseWeight) values(3,'curl up',false);\");\n  });\n\n  console.log(\"sqllog\", \"exercises created\");\n  callback();\n}\n\nfunction createRoutinesDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into routines(ID,name,placeOnList) values(1,'main routine',1);\");\n  });\n\n  console.log(\"sqllog\", \"routine created\");\n  callback();\n}\n\nfunction createExercisesWithinRoutineDD(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(1,1,1);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\");\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(3,1,3);\");\n  });\n\n  console.log(\"sqllog\", \"ExercisesWithinRoutine created\");\n  callback();\n}\n\nfunction clearDB(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from Workouts');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from Exercises');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from CompletedExercises');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from routines');\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql('Delete from ExercisesWithinRoutines');\n  });\n\n  console.log(\"sqllog\", \"db cleared\");\n  callback();\n}\n\nfunction logDataBase(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Workouts;\", [], function (_, rows) {\n      console.log(\"sqllog_Workouts\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedExercises;\", [], function (_, rows) {\n      console.log(\"sqllog_CompletedExercises\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      console.log(\"sqllog_Exercises\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from routines;\", [], function (_, rows) {\n      console.log(\"sqllog_routines\", rows.rows);\n    });\n  });\n\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines;\", [], function (_, rows) {\n      console.log(\"sqllog_ExercisesWithinRoutines\", rows.rows);\n    });\n  });\n\n  callback();\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/StartUpSQL.js"],"names":["createTables","callback","db","transaction","tx","executeSql","error","createDummyData","console","log","clearDB","createWorkoutDummyData","createExercisesDD","creatCompletedExercisesDData","createRoutinesDD","createExercisesWithinRoutineDD","logDataBase","_","rows"],"mappings":"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","sourcesContent":["import * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"./App\";\r\n\r\n//const db = SQLite.openDatabase(\"workoutAppDB.db\");\r\nexport function createTables(callback) {\r\n    db.transaction((tx) => {\r\n        try {\r\n            tx.executeSql(\r\n                'CREATE table if not exists Workouts(ID INTEGER PRIMARY KEY AUTOINCREMENT, date date not null);',\r\n            );\r\n        } catch (error) {}\r\n\r\n        try {\r\n            tx.executeSql(\r\n                'Create table if not exists Exercises(ID integer primary key AUTOINCREMENT, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\r\n            );\r\n        } catch (error) {}\r\n\r\n        try {\r\n            tx.executeSql(\r\n                'create table if not exists CompletedExercises(ID integer primary key AUTOINCREMENT, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,weight integer, workOutID int not null,FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(workOutID) REFERENCES Workouts(ID));',\r\n            );\r\n        } catch (error) {}\r\n\r\n        try {\r\n            tx.executeSql(\r\n                'create table if not exists routines(ID integer primary key AUTOINCREMENT, name varchar(30) not null,placeOnList integer);',\r\n            );\r\n        } catch (error) {}\r\n\r\n        try {\r\n            tx.executeSql(\r\n                'create table if not exists ExercisesWithinRoutines(exerciseID int not null, routineID int not null, placeInOrder int not null, FOREIGN KEY(exerciseId) REFERENCES Exercises(ID),FOREIGN KEY(routineID) REFERENCES WorkoutRoutines(ID), Primary key(exerciseId,routineID));',\r\n            );\r\n        } catch (error) {}\r\n        callback()\r\n    });\r\n}\r\n\r\n// stuff for dummyData\r\nexport function createDummyData(callback) {\r\n    console.log(\"sqllog\", \"createDD\")\r\n    clearDB(function (){\r\n        createWorkoutDummyData(function (){\r\n            createExercisesDD(function (){\r\n                creatCompletedExercisesDData(function (){\r\n                    createRoutinesDD(function (){\r\n                        createExercisesWithinRoutineDD(function (){\r\n\r\n                            //logDataBase(function (){\r\n                                callback()\r\n                            //})\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\n/*\r\none workout with date 10/20/2020 and id 1\r\n */\r\nexport function createWorkoutDummyData(callback){\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into workouts(id,date) values(1,'2020-10-20');\");\r\n    });\r\n    console.log(\"sqllog\", \"workouts created\")\r\n    callback()\r\n}\r\n\r\n/*\r\nthree completed exercises\r\n1. id = 1, exerciseId= 1, numberOfReps =5, numberOfSets = 3,weight = null, workOutID =1\r\n2. id = 2, exerciseId= 2, numberOfReps =6, numberOfSets = 2,weight = 5, workOutID =1\r\n3. id = 3, exerciseId= 3, numberOfReps =5, numberOfSets = 6,weight = null,  workOutID =1\r\n */\r\nexport function creatCompletedExercisesDData(callback){\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(1,1,5,3,1);\");\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID,weight) values(2,2,6,2,1, 5);\");\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into CompletedExercises(ID,exerciseId,numberOfReps,numberOfSets,workOutID) values(3,3,5,6,1);\");\r\n    });\r\n    console.log(\"sqllog\", \"completed exercises created\")\r\n    callback()\r\n}\r\n\r\n\r\n/*\r\nthree exercises\r\n1. id = 1, name = 'push up', description = 'it is a push up', doesUseWeight = false\r\n2. id = 2, name = 'dead lift', description = 'is a deadlift', doesUseWeight = true\r\n2. id = 3, name = 'curl up', description = null, doesUseWeight = false\r\n\r\n */\r\nexport function createExercisesDD(callback){\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(1,'push up','it is a push up',false);\",);\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into Exercises(ID,name,description,doesUseWeight) values(2,'dead lift','is a deadlift',true);\");\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into Exercises(ID,name,doesUseWeight) values(3,'curl up',false);\");\r\n    });\r\n    console.log(\"sqllog\", \"exercises created\")\r\n    callback()\r\n}\r\n\r\n\r\n\r\n/*\r\none routine\r\nid = 1, name = 'main routine', placeOnList = 1\r\n */\r\nexport function createRoutinesDD(callback){\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into routines(ID,name,placeOnList) values(1,'main routine',1);\");\r\n    });\r\n    console.log(\"sqllog\", \"routine created\")\r\n    callback()\r\n}\r\n\r\n/*\r\n3\r\n1. exerciseID = 1, routineID =1  placeInOrder =1\r\n2. exerciseID = 2, routineID =1  placeInOrder =2\r\n2. exerciseID = 3, routineID =1   placeInOrder =3\r\n */\r\nexport function createExercisesWithinRoutineDD(callback){\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(1,1,1);\");\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\");\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql(\"insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(3,1,3);\");\r\n    });\r\n    console.log(\"sqllog\", \"ExercisesWithinRoutine created\")\r\n    callback()\r\n}\r\n\r\n\r\nexport function clearDB(callback) {\r\n    db.transaction((tx) => {\r\n        tx.executeSql('Delete from Workouts');\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql('Delete from Exercises');\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql('Delete from CompletedExercises');\r\n    });\r\n    db.transaction((tx) => {\r\n        tx.executeSql('Delete from routines');\r\n    });\r\n    \r\n    db.transaction((tx) => {\r\n        tx.executeSql('Delete from ExercisesWithinRoutines');\r\n    });\r\n\r\n\r\n\r\n\r\n    console.log(\"sqllog\", \"db cleared\")\r\n    callback()\r\n}\r\n\r\nexport function logDataBase(callback) {\r\n\r\n    //logs workout table\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from Workouts;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_Workouts\", rows.rows)\r\n        })\r\n    })\r\n\r\n    //logs CompletedExercises table\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from CompletedExercises;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_CompletedExercises\", rows.rows)\r\n        })\r\n    })\r\n\r\n    //logs Exercises table\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from Exercises;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_Exercises\", rows.rows)\r\n        })\r\n    })\r\n\r\n    //logs routines table\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from routines;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_routines\", rows.rows)\r\n        })\r\n    })\r\n\r\n    //logs ExercisesWithinRoutines table\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines;\",[],(_,rows) =>{\r\n            console.log(\"sqllog_ExercisesWithinRoutines\", rows.rows)\r\n        })\r\n    })\r\n\r\n    callback()\r\n}\r\n"]},"metadata":{},"sourceType":"script"}