{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addExerciseToRoutine = addExerciseToRoutine;\nexports.deleteExerciseFromRoutine = deleteExerciseFromRoutine;\nexports.getExerciseFromRoutine = getExerciseFromRoutine;\nexports.updateExerciseFromExercise = updateExerciseFromExercise;\nexports.createNewExerciseFromExercise = createNewExerciseFromExercise;\nexports.getAllExercises = getAllExercises;\nexports.deleteExerciseById = deleteExerciseById;\nexports.saveExerciseFromCompletedExercises = saveExerciseFromCompletedExercises;\nexports.CompleteExercise = exports.Exercise = exports.ExerciseWithinRoutine = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _App = require(\"../App\");\n\nvar ExerciseWithinRoutine = function ExerciseWithinRoutine(exerciseID, routineId, placeInOrder) {\n  (0, _classCallCheck2.default)(this, ExerciseWithinRoutine);\n  this.exerciseID = exerciseID;\n  this.routineId = routineId;\n  this.placeInOrder = placeInOrder;\n};\n\nexports.ExerciseWithinRoutine = ExerciseWithinRoutine;\n\nfunction addExerciseToRoutine(routineID, exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(\" + exercise.exerciseID + \" , \" + routineID + \" , \" + exercise.placeInOrder + \" );\");\n\n    if (callback != null) {\n      callback();\n    }\n  });\n}\n\nfunction deleteExerciseFromRoutine(exercise) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"Delete from ExercisesWithinRoutines where \" + \"exerciseID = \" + exercise.exerciseID + \",\" + \"routineId = \" + exercise.routineId + \";\");\n  });\n}\n\nfunction getExerciseFromRoutine(routineID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\" + routineID + \";\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).exerciseID, rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nvar Exercise = function Exercise(exerciseID, name, description, doesUseWeight) {\n  (0, _classCallCheck2.default)(this, Exercise);\n  this.exerciseID = exerciseID;\n  this.name = name;\n  this.description = description;\n  this.doesUseWeight = doesUseWeight;\n};\n\nexports.Exercise = Exercise;\n\nfunction updateExerciseFromExercise(exercise) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"update Exercises set \" + \"name = '\" + exercise.name + \"',\" + \"description = '\" + exercise.description + \"', \" + \"doseUseWeight = '\" + exercise.description + \"'\" + \"where ID = \" + exercise.exerciseID + \";\");\n  });\n}\n\nfunction createNewExerciseFromExercise(exercise, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into Exercises(name,description,doesUseWeight) values('\" + exercise.name + \"','\" + exercise.description + \"',\" + exercise.doesUseWeight + \");\");\n\n    if (callback != null) {\n      callback();\n    }\n  });\n}\n\nfunction getAllExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from Exercises;\", [], function (_, rows) {\n      var tempExercises = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight));\n      }\n\n      tempExercises.sort(function (a, b) {\n        return a.placeInOrder - b.placeInOrder;\n      });\n\n      if (callback != null) {\n        callback(tempExercises);\n      }\n    });\n  });\n}\n\nfunction deleteExerciseById(id, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"delete from Exercises where ID = \" + id + \";\", [], function () {\n      if (callback != null) {\n        callback();\n      }\n    });\n  });\n}\n\nvar CompleteExercise = function CompleteExercise(ID, exerciseId, workoutId, numberOfReps, numberOfSets, weight) {\n  (0, _classCallCheck2.default)(this, CompleteExercise);\n  this.ID = ID;\n  this.exerciseId = exerciseId;\n  this.workoutId = workoutId;\n  this.numberOfReps = numberOfReps;\n  this.numberOfSets = numberOfSets;\n  this.weight = weight;\n};\n\nexports.CompleteExercise = CompleteExercise;\n\nfunction saveExerciseFromCompletedExercises(exercise) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,workOutID) values(\" + exercise.ID + \",\" + exercise.numberOfReps + \",\" + exercise.numberOfSets + \",\" + exercise.weight + \",\" + exercise.workoutId + \");\");\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Exercise.js"],"names":["ExerciseWithinRoutine","exerciseID","routineId","placeInOrder","addExerciseToRoutine","routineID","exercise","callback","db","transaction","tx","executeSql","deleteExerciseFromRoutine","getExerciseFromRoutine","_","rows","tempExercises","i","length","push","item","sort","a","b","Exercise","name","description","doesUseWeight","updateExerciseFromExercise","createNewExerciseFromExercise","getAllExercises","ID","deleteExerciseById","id","CompleteExercise","exerciseId","workoutId","numberOfReps","numberOfSets","weight","saveExerciseFromCompletedExercises"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport {db} from \"../App\";\r\n\r\n\r\n/*\r\nstuff for exerciuses that are wiuthin a routine\r\n\r\n */\r\nexport class ExerciseWithinRoutine{\r\n\r\n    constructor(exerciseID, routineId, placeInOrder) {\r\n        this.exerciseID = exerciseID\r\n        this.routineId = routineId\r\n        this.placeInOrder = placeInOrder\r\n    }\r\n}\r\n\r\n\r\nexport function addExerciseToRoutine(routineID,exercise, callback){\r\n        db.transaction(tx => {\r\n\r\n            //insert into ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(2,1,2);\r\n            tx.executeSql(\"insert ExercisesWithinRoutines(exerciseID,routineID,placeInOrder) values(\" +\r\n                exercise.exerciseID + \" , \" +\r\n                routineID + \" , \" +\r\n                exercise.placeInOrder +\r\n                \" );\")\r\n            if (callback != null) {\r\n                callback()\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport function deleteExerciseFromRoutine(exercise:ExerciseWithinRoutine){\r\n\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"Delete from ExercisesWithinRoutines where \" +\r\n            \"exerciseID = \"+exercise.exerciseID+\",\" +\r\n            \"routineId = \"+exercise.routineId+\";\")\r\n    })\r\n}\r\n\r\n\r\n//works\r\nexport function getExerciseFromRoutine(routineID, callback){\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"select * from ExercisesWithinRoutines where routineID =\"+ routineID +\";\",[],(_,rows) => {\r\n           // console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for(let i = 0;i<rows.rows.length;i++){\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new ExerciseWithinRoutine(rows.rows.item(i).exerciseID,rows.rows.item(i).routineID, rows.rows.item(i).placeInOrder))\r\n            }\r\n            tempExercises.sort(((a:ExerciseWithinRoutine, b:ExerciseWithinRoutine) => a.placeInOrder-b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nstuff for exercises that are bases to be added to routines\r\n\r\n */\r\n\r\n\r\n\r\nexport class Exercise{\r\n\r\n    constructor(exerciseID:number , name: string, description:string, doesUseWeight:boolean) {\r\n        this.exerciseID = exerciseID\r\n        this.name = name\r\n        this.description = description\r\n        this.doesUseWeight = doesUseWeight\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function updateExerciseFromExercise(exercise:Exercise){\r\n\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update Exercises set \" +\r\n            \"name = '\" + exercise.name + \"',\" +\r\n            \"description = '\" + exercise.description +\"', \" +\r\n            \"doseUseWeight = '\" + exercise.description +\"'\" +\r\n            \"where ID = \" + exercise.exerciseID + \";\",)\r\n    })\r\n}\r\n\r\nexport function createNewExerciseFromExercise(exercise: Exercise, callback){\r\n    //'Create table if not exists Exercises(ID integer primary key DESC, name varchar(30) not null, description varchar(120),doesUseWeight boolean not null);',\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"insert into Exercises(name,description,doesUseWeight) values('\" +\r\n            exercise.name + \"','\" +\r\n            exercise.description + \"',\" +\r\n            exercise.doesUseWeight +\r\n            \");\",)\r\n        if(callback != null){\r\n            callback()\r\n        }\r\n    })\r\n}\r\n\r\nexport function getAllExercises(callback) {\r\n\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from Exercises;\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempExercises = []\r\n\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempExercises.push(new Exercise(rows.rows.item(i).ID, rows.rows.item(i).name, rows.rows.item(i).description, rows.rows.item(i).doesUseWeight))\r\n            }\r\n            tempExercises.sort(((a: ExerciseWithinRoutine, b: ExerciseWithinRoutine) => a.placeInOrder - b.placeInOrder))\r\n            if(callback != null){\r\n                callback(tempExercises)\r\n            }\r\n        })\r\n\r\n    })\r\n}\r\n\r\nexport function deleteExerciseById(id, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"delete from Exercises where ID = \"+id+\";\", [], () => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            if(callback != null){\r\n                callback()\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\nall of this can be done eaiser by one method\r\nexport function updateExerciseName(exerciseName, exerciseID) {\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update Exercises set name = \" + exerciseName + \" where ID = \" + exerciseID + \";\",)\r\n        })\r\n}\r\n\r\nexport function updateExcerciseInfo(routineID, numberOfReps, numberOfSets, weight, placeInOrder) {\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"update ExercisesWithinRoutines set numberOFRep = \" + numberOfReps + \", numberOfSets = \" + numberOfSets + \", weight = \" + weight + \", placeInOrder = \" + placeInOrder + \" where routineID = \" + routineID + \";\",)\r\n        })\r\n}\r\n */\r\n\r\n\r\n/*\r\ncompleted exercise stuff\r\n\r\ncreate table if not exists CompletedExercises(ID integer primary key DESC, exerciseId int not null,numberOfReps int not null,numberOfSets int not null,weight integer, workOutID int not null,\r\n */\r\nexport class CompleteExercise{\r\n    constructor(ID: number, exerciseId: number,workoutId:number, numberOfReps:number , numberOfSets:number, weight) {\r\n        this.ID =ID\r\n        this.exerciseId = exerciseId\r\n        this.workoutId = workoutId\r\n        this.numberOfReps = numberOfReps\r\n        this.numberOfSets = numberOfSets\r\n        this.weight = weight\r\n    }\r\n\r\n}\r\n\r\nexport function saveExerciseFromCompletedExercises(exercise:CompleteExercise) {\r\n\r\n    db.transaction(tx =>{\r\n        tx.executeSql(\"insert into CompletedExercises(exerciseId,numberOfReps,numberOfSets,workOutID) values(\" +\r\n        exercise.ID + \",\" +\r\n        exercise.numberOfReps + \",\" +\r\n        exercise.numberOfSets + \",\" +\r\n        exercise.weight + \",\" +\r\n        exercise.workoutId +\r\n        \");\",)\r\n    })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"script"}