{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMapOfCompleteWorkoutIDsToDates = getMapOfCompleteWorkoutIDsToDates;\nexports.getAllCompleteWorkoutsWithoutExercises = getAllCompleteWorkoutsWithoutExercises;\nexports.getCompleteWorkout = getCompleteWorkout;\nexports.CompletedWorkout = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _App = require(\"../App\");\n\nvar _Exercise = require(\"./Exercise\");\n\nvar CompletedWorkout = function CompletedWorkout(ID, date, completedExercises) {\n  (0, _classCallCheck2.default)(this, CompletedWorkout);\n  this.ID = ID;\n  this.date = date;\n  this.completedExercises = completedExercises;\n};\n\nexports.CompletedWorkout = CompletedWorkout;\n\nfunction getMapOfCompleteWorkoutIDsToDates(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedWorkouts;\", [], function (_, rows) {\n      var tempWorkouts = new Map();\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempWorkouts.set(rows.rows.item(i).ID, rows.rows.item(i).date);\n      }\n\n      if (callback != null) {\n        callback(tempWorkouts);\n      }\n    });\n  });\n}\n\nfunction getAllCompleteWorkoutsWithoutExercises(callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedWorkouts;\", [], function (_, rows) {\n      var tempWorkouts = [];\n\n      for (var i = 0; i < rows.rows.length; i++) {\n        tempWorkouts.push(new CompletedWorkout(rows.rows.item(i).ID, rows.rows.item(i).date));\n      }\n\n      if (callback != null) {\n        callback(tempWorkouts);\n      }\n    });\n  });\n}\n\nfunction getCompleteWorkout(workoutID, callback) {\n  _App.db.transaction(function (tx) {\n    tx.executeSql(\"select * from CompletedWorkouts where ID = \" + workoutID + \";\", [], function (_, rows) {\n      var tempWorkout = rows.rows.item(0);\n    });\n  });\n}","map":{"version":3,"sources":["D:/school/softdev projects/WorkoutApp/Classes/Workout.js"],"names":["CompletedWorkout","ID","date","completedExercises","getMapOfCompleteWorkoutIDsToDates","callback","db","transaction","tx","executeSql","_","rows","tempWorkouts","Map","i","length","set","item","getAllCompleteWorkoutsWithoutExercises","push","getCompleteWorkout","workoutID","tempWorkout"],"mappings":";;;;;;;;;;;;AAIA;;AACA;;IAEaA,gB,GACT,0BAAYC,EAAZ,EAAgBC,IAAhB,EAAsBC,kBAAtB,EAA0C;AAAA;AACtC,OAAKF,EAAL,GAAUA,EAAV;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,kBAAL,GAA0BA,kBAA1B;AACH,C;;;;AAIE,SAASC,iCAAT,CAA2CC,QAA3C,EAAoD;AACvDC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,IAAAA,EAAE,CAACC,UAAH,CAAc,kCAAd,EAAkD,EAAlD,EAAsD,UAACC,CAAD,EAAIC,IAAJ,EAAa;AAE/D,UAAIC,YAAY,GAAG,IAAIC,GAAJ,EAAnB;;AAGA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACA,IAAL,CAAUI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAEvCF,QAAAA,YAAY,CAACI,GAAb,CAAiBL,IAAI,CAACA,IAAL,CAAUM,IAAV,CAAeH,CAAf,EAAkBb,EAAnC,EAAsCU,IAAI,CAACA,IAAL,CAAUM,IAAV,CAAeH,CAAf,EAAkBZ,IAAxD;AACH;;AAED,UAAGG,QAAQ,IAAI,IAAf,EAAoB;AAChBA,QAAAA,QAAQ,CAACO,YAAD,CAAR;AACH;AACJ,KAbD;AAcH,GAfD;AAgBH;;AAEM,SAASM,sCAAT,CAAgDb,QAAhD,EAAyD;AAC5DC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,IAAAA,EAAE,CAACC,UAAH,CAAc,kCAAd,EAAkD,EAAlD,EAAsD,UAACC,CAAD,EAAIC,IAAJ,EAAa;AAE/D,UAAIC,YAAY,GAAG,EAAnB;;AAGA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACA,IAAL,CAAUI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAEvCF,QAAAA,YAAY,CAACO,IAAb,CAAkB,IAAInB,gBAAJ,CAAqBW,IAAI,CAACA,IAAL,CAAUM,IAAV,CAAeH,CAAf,EAAkBb,EAAvC,EAA0CU,IAAI,CAACA,IAAL,CAAUM,IAAV,CAAeH,CAAf,EAAkBZ,IAA5D,CAAlB;AACH;;AAED,UAAGG,QAAQ,IAAI,IAAf,EAAoB;AAChBA,QAAAA,QAAQ,CAACO,YAAD,CAAR;AACH;AACJ,KAbD;AAcH,GAfD;AAgBH;;AAEM,SAASQ,kBAAT,CAA4BC,SAA5B,EAAuChB,QAAvC,EAAgD;AACnDC,UAAGC,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,IAAAA,EAAE,CAACC,UAAH,CAAc,gDAA8CY,SAA9C,GAAwD,GAAtE,EAA2E,EAA3E,EAA+E,UAACX,CAAD,EAAIC,IAAJ,EAAa;AAExF,UAAIW,WAAW,GAAGX,IAAI,CAACA,IAAL,CAAUM,IAAV,CAAe,CAAf,CAAlB;AAEH,KAJD;AAKH,GAND;AAOH","sourcesContent":["/*\r\nCREATE table if not exists CompletedWorkouts(ID INTEGER PRIMARY KEY AUTOINCREMENT, date date not null)\r\n */\r\n\r\nimport {db} from \"../App\";\r\nimport {Exercise, ExerciseWithinRoutine} from \"./Exercise\";\r\n\r\nexport class CompletedWorkout{\r\n    constructor(ID, date, completedExercises) {\r\n        this.ID = ID\r\n        this.date = date\r\n        this.completedExercises = completedExercises\r\n    }\r\n}\r\n\r\n//tested\r\nexport function getMapOfCompleteWorkoutIDsToDates(callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedWorkouts;\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getExerciseFromRoutine_rows\",rows.rows)\r\n            let tempWorkouts = new Map()\r\n\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getExerciseFromRoutine_rows_individually\",rows.rows.item(i))\r\n                tempWorkouts.set(rows.rows.item(i).ID,rows.rows.item(i).date)\r\n            }\r\n            //tempWorkouts.sort(((a: CompletedWorkout, b: CompletedWorkout) => a.ID - b.ID))\r\n            if(callback != null){\r\n                callback(tempWorkouts)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function getAllCompleteWorkoutsWithoutExercises(callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedWorkouts;\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getCompleteWorkoutsWithoutExercises_rows\",rows.rows)\r\n            let tempWorkouts = []\r\n\r\n\r\n            for (let i = 0; i < rows.rows.length; i++) {\r\n                //console.log(\"sqllog_method_getCompleteWorkoutsWithoutExercises_rows_individually\",rows.rows.item(i))\r\n                tempWorkouts.push(new CompletedWorkout(rows.rows.item(i).ID,rows.rows.item(i).date))\r\n            }\r\n\r\n            if(callback != null){\r\n                callback(tempWorkouts)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function getCompleteWorkout(workoutID, callback){\r\n    db.transaction(tx => {\r\n        tx.executeSql(\"select * from CompletedWorkouts where ID = \"+workoutID+\";\", [], (_, rows) => {\r\n            //console.log(\"sqllog_method_getCompleteWorkoutsWithoutExercises_rows\",rows.rows)\r\n            let tempWorkout = rows.rows.item(0)\r\n\r\n        })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}