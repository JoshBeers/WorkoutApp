{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _NativeStackView = _interopRequireDefault(require(\"../views/NativeStackView\"));\n\nvar _jsxFileName = \"/Users/Anne/WebstormProjects/WorkoutApp/node_modules/react-native-screens/src/native-stack/navigators/createNativeStackNavigator.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction NativeStackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  if (!(0, _reactNativeScreens.screensEnabled)()) {\n    throw new Error('Native stack is only available if React Native Screens is enabled.');\n  }\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    return navigation == null ? void 0 : navigation.addListener == null ? void 0 : navigation.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(_NativeStackView.default, (0, _extends2.default)({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/Anne/WebstormProjects/WorkoutApp/node_modules/react-native-screens/src/native-stack/navigators/createNativeStackNavigator.tsx"],"names":["NativeStackNavigator","initialRouteName","children","screenOptions","rest","Error","StackRouter","state","descriptors","navigation","React","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key"],"mappings":";;;;;;;;;;;;;;;AAAA;;AASA;;AACA;;AAMA;;;;;;;;AAEA,SAASA,oBAAT,OAK8B;AAAA,MAJ5BC,gBAI4B,QAJ5BA,gBAI4B;AAAA,MAH5BC,QAG4B,QAH5BA,QAG4B;AAAA,MAF5BC,aAE4B,QAF5BA,aAE4B;AAAA,MADzBC,IACyB;;AAC5B,MAAI,CAAC,yCAAL,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CACJ,oEADI,CAAN;AAGD;;AAL2B,8BAOe,kCAKzCC,mBALyC,EAK5B;AACbL,IAAAA,gBAAgB,EAAhBA,gBADa;AAEbC,IAAAA,QAAQ,EAARA,QAFa;AAGbC,IAAAA,aAAa,EAAbA;AAHa,GAL4B,CAPf;AAAA,MAOpBI,KAPoB,yBAOpBA,KAPoB;AAAA,MAObC,WAPa,yBAObA,WAPa;AAAA,MAOAC,UAPA,yBAOAA,UAPA;;AAkB5BC,EAAAA,KAAK,CAACC,SAAN,CACE;AAAA,WACEF,UADF,oBACEA,UAAU,CAAEG,WADd,oBACEH,UAAU,CAAEG,WAAZ,CAA0B,UAA1B,EAAsC,UAACC,CAAD,EAAO;AAC3C,UAAMC,SAAS,GAAGL,UAAU,CAACK,SAAX,EAAlB;AAIAC,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACER,KAAK,CAACS,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AAGAR,UAAAA,UAAU,CAACS,QAAX,iCACKC,qBAAaC,QAAb,EADL;AAEEC,YAAAA,MAAM,EAAEd,KAAK,CAACe;AAFhB;AAID;AACF,OAboB,CAArB;AAcD,KAnBD,CADF;AAAA,GADF,EAsBE,CAACb,UAAD,EAAaF,KAAK,CAACS,KAAnB,EAA0BT,KAAK,CAACe,GAAhC,CAtBF;AAyBA,SACE,oBAAC,wBAAD,6BACMlB,IADN;AAEE,IAAA,KAAK,EAAEG,KAFT;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAED,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD;;eAEc,oCAKbR,oBALa,C","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { screensEnabled } from 'react-native-screens';\nimport {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"script"}