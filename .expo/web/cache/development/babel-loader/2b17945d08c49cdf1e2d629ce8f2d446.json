{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Colors = _interopRequireDefault(require(\"../Themes/Colors\"));\n\nvar _reactNativeSegmentedControlTab = _interopRequireDefault(require(\"react-native-segmented-control-tab\"));\n\nvar _WorkoutTabs = require(\"./WorkoutTabs\");\n\nvar SQLite = _interopRequireWildcard(require(\"expo-sqlite\"));\n\nvar _jsxFileName = \"D:\\\\Dell\\\\Documents\\\\SCHOOL SHIT\\\\FALL 2020\\\\Software Dev Project\\\\WorkoutApp\\\\Screens\\\\ChooseWorkoutScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ChooseWorkoutScreen = function (_Component) {\n  (0, _inherits2.default)(ChooseWorkoutScreen, _Component);\n\n  var _super = _createSuper(ChooseWorkoutScreen);\n\n  function ChooseWorkoutScreen() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ChooseWorkoutScreen);\n    _this = _super.call(this);\n\n    _this.handleIndexChange = function (index) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        selectedIndex: index\n      }));\n    };\n\n    _this.state = {\n      selectedIndex: 0\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(ChooseWorkoutScreen, [{\n    key: \"getRoutines\",\n    value: function getRoutines() {\n      var db = SQLite.openDatabase(\"workoutAppDB.db\");\n      db.transaction(function (tx) {\n        tx.executeSql(\"select * from routines;\", [], function (_, rows) {\n          console.log(\"sqllog_ChooseWorkoutScreen_routines\", rows.rows);\n          return rows.rows;\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_reactNative.View, {\n        style: styles.workout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: styles.titleText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }, \"Choose a Workout\"), _react.default.createElement(_reactNativeSegmentedControlTab.default, {\n        values: ['Cardio', 'Weights'],\n        selectedIndex: this.state.selectedIndex,\n        onTabPress: this.handleIndexChange,\n        tabsContainerStyle: styles.tabContainer,\n        tabStyle: styles.tab,\n        activeTabStyle: styles.activeTab,\n        tabTextStyle: styles.tabText,\n        activeTabTextStyle: {\n          color: _Colors.default.textDark\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }), this.state.selectedIndex === 0 ? _react.default.createElement(_WorkoutTabs.Cardio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 45\n        }\n      }) : _react.default.createElement(_WorkoutTabs.Cardio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 58\n        }\n      })));\n    }\n  }]);\n  return ChooseWorkoutScreen;\n}(_react.Component);\n\nexports.default = ChooseWorkoutScreen;\n\nvar styles = _reactNative.StyleSheet.create({\n  workout: {\n    backgroundColor: _Colors.default.background,\n    flex: 1\n  },\n  container: {\n    marginVertical: 30,\n    marginHorizontal: 30\n  },\n  titleText: {\n    color: _Colors.default.text,\n    fontSize: 27,\n    marginBottom: 20\n  },\n  tabContainer: {\n    height: 33,\n    backgroundColor: _Colors.default.card,\n    marginBottom: 12\n  },\n  tab: {\n    backgroundColor: _Colors.default.background,\n    borderWidth: 0,\n    borderColor: 'transparent'\n  },\n  activeTab: {\n    backgroundColor: _Colors.default.btn,\n    marginTop: 2\n  },\n  tabText: {\n    color: _Colors.default.text,\n    fontWeight: 'bold'\n  },\n  gridView: {\n    flexDirection: 'column',\n    alignSelf: 'center'\n  }\n});","map":{"version":3,"sources":["D:/Dell/Documents/SCHOOL SHIT/FALL 2020/Software Dev Project/WorkoutApp/Screens/ChooseWorkoutScreen.js"],"names":["ChooseWorkoutScreen","handleIndexChange","index","setState","state","selectedIndex","db","SQLite","openDatabase","transaction","tx","executeSql","_","rows","console","log","styles","workout","container","titleText","tabContainer","tab","activeTab","tabText","color","Colors","textDark","Component","StyleSheet","create","backgroundColor","background","flex","marginVertical","marginHorizontal","text","fontSize","marginBottom","height","card","borderWidth","borderColor","btn","marginTop","fontWeight","gridView","flexDirection","alignSelf"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {StyleSheet, Text, View} from 'react-native';\r\nimport Colors from '../Themes/Colors';\r\nimport SegmentedControlTab from 'react-native-segmented-control-tab';\r\nimport {Cardio} from './WorkoutTabs';\r\nimport * as SQLite from \"expo-sqlite\";\r\n\r\nexport default class ChooseWorkoutScreen extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selectedIndex: 0,\r\n    };\r\n  }\r\n\r\n  handleIndexChange = (index) => {\r\n    this.setState({\r\n      ...this.state,\r\n      selectedIndex: index,\r\n    });\r\n  };\r\n\r\n  //method returns a list of routines\r\n  //has not been tested\r\n  getRoutines(){\r\n    const db = SQLite.openDatabase(\"workoutAppDB.db\");\r\n\r\n    db.transaction(tx =>{\r\n      tx.executeSql(\"select * from routines;\",[],(_,rows) =>{\r\n\r\n        console.log(\"sqllog_ChooseWorkoutScreen_routines\", rows.rows)\r\n\r\n        return rows.rows;\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.workout}>\r\n        <View style={styles.container}>\r\n          <Text style={styles.titleText}>Choose a Workout</Text>\r\n          <SegmentedControlTab\r\n            values={['Cardio', 'Weights']}\r\n            selectedIndex={this.state.selectedIndex}\r\n            onTabPress={this.handleIndexChange}\r\n            tabsContainerStyle={styles.tabContainer}\r\n            tabStyle={styles.tab}\r\n            activeTabStyle={styles.activeTab}\r\n            tabTextStyle={styles.tabText}\r\n            activeTabTextStyle={{color: Colors.textDark}}\r\n          />\r\n          {this.state.selectedIndex === 0 ? <Cardio /> : <Cardio />}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  workout: {\r\n    backgroundColor: Colors.background,\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    marginVertical: 30,\r\n    marginHorizontal: 30,\r\n  },\r\n  titleText: {\r\n    color: Colors.text,\r\n    fontSize: 27,\r\n    marginBottom: 20,\r\n  },\r\n  tabContainer: {\r\n    height: 33,\r\n    backgroundColor: Colors.card,\r\n    marginBottom: 12,\r\n  },\r\n  tab: {\r\n    backgroundColor: Colors.background,\r\n    borderWidth: 0,\r\n    borderColor: 'transparent',\r\n  },\r\n  activeTab: {\r\n    backgroundColor: Colors.btn,\r\n    marginTop: 2,\r\n  },\r\n  tabText: {\r\n    color: Colors.text,\r\n    fontWeight: 'bold',\r\n  },\r\n  gridView: {\r\n    flexDirection: 'column',\r\n    alignSelf: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"script"}